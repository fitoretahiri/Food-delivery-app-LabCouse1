{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assumptionsNames = void 0;\nexports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;\nexports.validate = validate;\n\nvar _plugin = require(\"../plugin\");\n\nvar _removed = require(\"./removed\");\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nconst ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  cloneInputAst: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nconst BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nconst NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList,\n  targets: _optionAssertions.assertTargets,\n  browserslistConfigFile: _optionAssertions.assertConfigFileSearch,\n  browserslistEnv: _optionAssertions.assertString\n};\nconst COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  assumptions: _optionAssertions.assertAssumptions,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n{\n  Object.assign(COMMON_VALIDATORS, {\n    getModuleId: _optionAssertions.assertFunction,\n    moduleRoot: _optionAssertions.assertString,\n    moduleIds: _optionAssertions.assertBoolean,\n    moduleId: _optionAssertions.assertString\n  });\n}\nconst assumptionsNames = new Set([\"arrayLikeIsIterable\", \"constantReexports\", \"constantSuper\", \"enumerableModuleMeta\", \"ignoreFunctionLength\", \"ignoreToPrimitiveHint\", \"iterableIsArray\", \"mutableTemplateObject\", \"noClassCalls\", \"noDocumentAll\", \"noIncompleteNsImportDetection\", \"noNewArrows\", \"objectRestNoSymbols\", \"privateFieldsAsProperties\", \"pureGetters\", \"setClassMethods\", \"setComputedProperties\", \"setPublicClassFields\", \"setSpreadProperties\", \"skipForOfIteratorClosing\", \"superIsCallableConstructor\"]);\nexports.assumptionsNames = assumptionsNames;\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  const type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(key => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\n      }\n\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);\n    }\n\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  const key = loc.name;\n\n  if (_removed.default[key]) {\n    const {\n      message,\n      version = 5\n    } = _removed.default[key];\n    throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);\n  } else {\n    const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n    throw unknownOptErr;\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);\n  }\n\n  const parent = loc.parent;\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (const envName of Object.keys(obj)) {\n      const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);\n  }\n\n  const parent = loc.parent;\n  const arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = (0, _optionAssertions.access)(loc, index);\n      const env = (0, _optionAssertions.assertObject)(objLoc, item);\n      if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent\n      };\n      validateNested(overridesLoc, env);\n    }\n  }\n\n  return arr;\n}\n\nfunction checkNoUnwrappedItemOptionPairs(items, index, type, e) {\n  if (index === 0) return;\n  const lastItem = items[index - 1];\n  const thisItem = items[index];\n\n  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === \"object\") {\n    e.message += `\\n- Maybe you meant to use\\n` + `\"${type}s\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(thisItem.value, undefined, 2)}]\\n]\\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","assumptionsNames","checkNoUnwrappedItemOptionPairs","validate","_plugin","require","_removed","_optionAssertions","ROOT_VALIDATORS","cwd","assertString","root","rootMode","assertRootMode","configFile","assertConfigFileSearch","caller","assertCallerMetadata","filename","filenameRelative","code","assertBoolean","ast","cloneInputAst","envName","BABELRC_VALIDATORS","babelrc","babelrcRoots","assertBabelrcSearch","NONPRESET_VALIDATORS","extends","ignore","assertIgnoreList","only","targets","assertTargets","browserslistConfigFile","browserslistEnv","COMMON_VALIDATORS","inputSourceMap","assertInputSourceMap","presets","assertPluginList","plugins","passPerPreset","assumptions","assertAssumptions","env","assertEnvSet","overrides","assertOverridesList","test","assertConfigApplicableTest","include","exclude","retainLines","comments","shouldPrintComment","assertFunction","compact","assertCompact","minified","auxiliaryCommentBefore","auxiliaryCommentAfter","sourceType","assertSourceType","wrapPluginVisitorMethod","highlightCode","sourceMaps","assertSourceMaps","sourceMap","sourceFileName","sourceRoot","parserOpts","assertObject","generatorOpts","assign","getModuleId","moduleRoot","moduleIds","moduleId","Set","getSource","loc","type","source","parent","opts","validateNested","assertNoDuplicateSourcemap","keys","forEach","key","optLoc","name","Error","msg","validator","throwUnknownError","default","message","version","unknownOptErr","has","obj","prototype","hasOwnProperty","call","access","envLoc","arr","assertArray","index","item","entries","objLoc","overridesLoc","items","e","lastItem","thisItem","file","options","undefined","request","JSON","stringify"],"sources":["C:/Users/Arber/Documents/GitHub/Food-delivery-app-LabCouse1/Food-delivery-app-LabCouse1/front-end-code/node_modules/@babel/core/lib/config/validation/options.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.assumptionsNames = void 0;\r\nexports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;\r\nexports.validate = validate;\r\n\r\nvar _plugin = require(\"../plugin\");\r\n\r\nvar _removed = require(\"./removed\");\r\n\r\nvar _optionAssertions = require(\"./option-assertions\");\r\n\r\nconst ROOT_VALIDATORS = {\r\n  cwd: _optionAssertions.assertString,\r\n  root: _optionAssertions.assertString,\r\n  rootMode: _optionAssertions.assertRootMode,\r\n  configFile: _optionAssertions.assertConfigFileSearch,\r\n  caller: _optionAssertions.assertCallerMetadata,\r\n  filename: _optionAssertions.assertString,\r\n  filenameRelative: _optionAssertions.assertString,\r\n  code: _optionAssertions.assertBoolean,\r\n  ast: _optionAssertions.assertBoolean,\r\n  cloneInputAst: _optionAssertions.assertBoolean,\r\n  envName: _optionAssertions.assertString\r\n};\r\nconst BABELRC_VALIDATORS = {\r\n  babelrc: _optionAssertions.assertBoolean,\r\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\r\n};\r\nconst NONPRESET_VALIDATORS = {\r\n  extends: _optionAssertions.assertString,\r\n  ignore: _optionAssertions.assertIgnoreList,\r\n  only: _optionAssertions.assertIgnoreList,\r\n  targets: _optionAssertions.assertTargets,\r\n  browserslistConfigFile: _optionAssertions.assertConfigFileSearch,\r\n  browserslistEnv: _optionAssertions.assertString\r\n};\r\nconst COMMON_VALIDATORS = {\r\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\r\n  presets: _optionAssertions.assertPluginList,\r\n  plugins: _optionAssertions.assertPluginList,\r\n  passPerPreset: _optionAssertions.assertBoolean,\r\n  assumptions: _optionAssertions.assertAssumptions,\r\n  env: assertEnvSet,\r\n  overrides: assertOverridesList,\r\n  test: _optionAssertions.assertConfigApplicableTest,\r\n  include: _optionAssertions.assertConfigApplicableTest,\r\n  exclude: _optionAssertions.assertConfigApplicableTest,\r\n  retainLines: _optionAssertions.assertBoolean,\r\n  comments: _optionAssertions.assertBoolean,\r\n  shouldPrintComment: _optionAssertions.assertFunction,\r\n  compact: _optionAssertions.assertCompact,\r\n  minified: _optionAssertions.assertBoolean,\r\n  auxiliaryCommentBefore: _optionAssertions.assertString,\r\n  auxiliaryCommentAfter: _optionAssertions.assertString,\r\n  sourceType: _optionAssertions.assertSourceType,\r\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\r\n  highlightCode: _optionAssertions.assertBoolean,\r\n  sourceMaps: _optionAssertions.assertSourceMaps,\r\n  sourceMap: _optionAssertions.assertSourceMaps,\r\n  sourceFileName: _optionAssertions.assertString,\r\n  sourceRoot: _optionAssertions.assertString,\r\n  parserOpts: _optionAssertions.assertObject,\r\n  generatorOpts: _optionAssertions.assertObject\r\n};\r\n{\r\n  Object.assign(COMMON_VALIDATORS, {\r\n    getModuleId: _optionAssertions.assertFunction,\r\n    moduleRoot: _optionAssertions.assertString,\r\n    moduleIds: _optionAssertions.assertBoolean,\r\n    moduleId: _optionAssertions.assertString\r\n  });\r\n}\r\nconst assumptionsNames = new Set([\"arrayLikeIsIterable\", \"constantReexports\", \"constantSuper\", \"enumerableModuleMeta\", \"ignoreFunctionLength\", \"ignoreToPrimitiveHint\", \"iterableIsArray\", \"mutableTemplateObject\", \"noClassCalls\", \"noDocumentAll\", \"noIncompleteNsImportDetection\", \"noNewArrows\", \"objectRestNoSymbols\", \"privateFieldsAsProperties\", \"pureGetters\", \"setClassMethods\", \"setComputedProperties\", \"setPublicClassFields\", \"setSpreadProperties\", \"skipForOfIteratorClosing\", \"superIsCallableConstructor\"]);\r\nexports.assumptionsNames = assumptionsNames;\r\n\r\nfunction getSource(loc) {\r\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\r\n}\r\n\r\nfunction validate(type, opts) {\r\n  return validateNested({\r\n    type: \"root\",\r\n    source: type\r\n  }, opts);\r\n}\r\n\r\nfunction validateNested(loc, opts) {\r\n  const type = getSource(loc);\r\n  assertNoDuplicateSourcemap(opts);\r\n  Object.keys(opts).forEach(key => {\r\n    const optLoc = {\r\n      type: \"option\",\r\n      name: key,\r\n      parent: loc\r\n    };\r\n\r\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\r\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);\r\n    }\r\n\r\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\r\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);\r\n    }\r\n\r\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\r\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\r\n        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\r\n      }\r\n\r\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);\r\n    }\r\n\r\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\r\n    validator(optLoc, opts[key]);\r\n  });\r\n  return opts;\r\n}\r\n\r\nfunction throwUnknownError(loc) {\r\n  const key = loc.name;\r\n\r\n  if (_removed.default[key]) {\r\n    const {\r\n      message,\r\n      version = 5\r\n    } = _removed.default[key];\r\n    throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);\r\n  } else {\r\n    const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);\r\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\r\n    throw unknownOptErr;\r\n  }\r\n}\r\n\r\nfunction has(obj, key) {\r\n  return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\n\r\nfunction assertNoDuplicateSourcemap(opts) {\r\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\r\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\r\n  }\r\n}\r\n\r\nfunction assertEnvSet(loc, value) {\r\n  if (loc.parent.type === \"env\") {\r\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);\r\n  }\r\n\r\n  const parent = loc.parent;\r\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\r\n\r\n  if (obj) {\r\n    for (const envName of Object.keys(obj)) {\r\n      const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\r\n      if (!env) continue;\r\n      const envLoc = {\r\n        type: \"env\",\r\n        name: envName,\r\n        parent\r\n      };\r\n      validateNested(envLoc, env);\r\n    }\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction assertOverridesList(loc, value) {\r\n  if (loc.parent.type === \"env\") {\r\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);\r\n  }\r\n\r\n  if (loc.parent.type === \"overrides\") {\r\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);\r\n  }\r\n\r\n  const parent = loc.parent;\r\n  const arr = (0, _optionAssertions.assertArray)(loc, value);\r\n\r\n  if (arr) {\r\n    for (const [index, item] of arr.entries()) {\r\n      const objLoc = (0, _optionAssertions.access)(loc, index);\r\n      const env = (0, _optionAssertions.assertObject)(objLoc, item);\r\n      if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);\r\n      const overridesLoc = {\r\n        type: \"overrides\",\r\n        index,\r\n        parent\r\n      };\r\n      validateNested(overridesLoc, env);\r\n    }\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction checkNoUnwrappedItemOptionPairs(items, index, type, e) {\r\n  if (index === 0) return;\r\n  const lastItem = items[index - 1];\r\n  const thisItem = items[index];\r\n\r\n  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === \"object\") {\r\n    e.message += `\\n- Maybe you meant to use\\n` + `\"${type}s\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(thisItem.value, undefined, 2)}]\\n]\\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}