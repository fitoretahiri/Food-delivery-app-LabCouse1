{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n\nconst ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst reflect = function (keys) {\n  let last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keys.length - 1;\n  return {\n    get() {\n      return keys.reduce((object, key) => object[key], this);\n    },\n\n    set(value) {\n      keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);\n    }\n\n  };\n};\n\nconst instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(_ref2 => {\n  let [, descriptor] = _ref2;\n  return !!descriptor;\n}).map(_ref3 => {\n  let [key, descriptor] = _ref3;\n  return [key, typeof descriptor === \"function\" ? {\n    value: descriptor,\n    enumerable: false\n  } : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor];\n}).reduce((instance, _ref4) => {\n  let [key, descriptor] = _ref4;\n  return Object.defineProperty(instance, key, Object.assign({\n    configurable: true\n  }, descriptor));\n}, Object.assign(new constructor(), properties));\n\nvar ModuleErrors = _ => ({\n  ImportMetaOutsideModule: _(`import.meta may appear only with 'sourceType: \"module\"'`, {\n    code: ParseErrorCodes.SourceTypeModuleError\n  }),\n  ImportOutsideModule: _(`'import' and 'export' may appear only with 'sourceType: \"module\"'`, {\n    code: ParseErrorCodes.SourceTypeModuleError\n  })\n});\n\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\n\nconst toNodeDescription = _ref5 => {\n  let {\n    type,\n    prefix\n  } = _ref5;\n  return type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\n};\n\nvar StandardErrors = _ => ({\n  AccessorIsGenerator: _(_ref6 => {\n    let {\n      kind\n    } = _ref6;\n    return `A ${kind}ter cannot be a generator.`;\n  }),\n  ArgumentsInClass: _(\"'arguments' is only allowed in functions and class methods.\"),\n  AsyncFunctionInSingleStatementContext: _(\"Async functions can only be declared at the top level or inside a block.\"),\n  AwaitBindingIdentifier: _(\"Can not use 'await' as identifier inside an async function.\"),\n  AwaitBindingIdentifierInStaticBlock: _(\"Can not use 'await' as identifier inside a static block.\"),\n  AwaitExpressionFormalParameter: _(\"'await' is not allowed in async function parameters.\"),\n  AwaitNotInAsyncContext: _(\"'await' is only allowed within async functions and at the top levels of modules.\"),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\"A 'set' accesor function argument must not be a rest parameter.\"),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\"Classes may not have a private field named '#constructor'.\"),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _(_ref7 => {\n    let {\n      kind\n    } = _ref7;\n    return `Missing initializer in ${kind} declaration.`;\n  }),\n  DecoratorBeforeExport: _(\"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\"),\n  DecoratorConstructor: _(\"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\"),\n  DecoratorExportClass: _(\"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\"),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\"),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _(_ref8 => {\n    let {\n      exportName\n    } = _ref8;\n    return `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`;\n  }),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _(_ref9 => {\n    let {\n      localName,\n      exportName\n    } = _ref9;\n    return `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`;\n  }),\n  ExportDefaultFromAsIdentifier: _(\"'from' is not allowed as an identifier after 'export default'.\"),\n  ForInOfLoopInitializer: _(_ref10 => {\n    let {\n      type\n    } = _ref10;\n    return `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`;\n  }),\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\"Generators can only be declared at the top level or inside a block.\"),\n  IllegalBreakContinue: _(_ref11 => {\n    let {\n      type\n    } = _ref11;\n    return `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`;\n  }),\n  IllegalLanguageModeDirective: _(\"Illegal 'use strict' directive in function with non-simple parameter list.\"),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _(_ref12 => {\n    let {\n      importName\n    } = _ref12;\n    return `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`;\n  }),\n  ImportCallArgumentTrailingComma: _(\"Trailing comma is disallowed inside import(...) arguments.\"),\n  ImportCallArity: _(_ref13 => {\n    let {\n      maxArgumentCount\n    } = _ref13;\n    return `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`;\n  }),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\"),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _(_ref14 => {\n    let {\n      radix\n    } = _ref14;\n    return `Expected number in radix ${radix}.`;\n  }),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _(_ref15 => {\n    let {\n      reservedWord\n    } = _ref15;\n    return `Escape sequence in keyword ${reservedWord}.`;\n  }),\n  InvalidIdentifier: _(_ref16 => {\n    let {\n      identifierName\n    } = _ref16;\n    return `Invalid identifier ${identifierName}.`;\n  }),\n  InvalidLhs: _(_ref17 => {\n    let {\n      ancestor\n    } = _ref17;\n    return `Invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  }),\n  InvalidLhsBinding: _(_ref18 => {\n    let {\n      ancestor\n    } = _ref18;\n    return `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  }),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\"Floating-point numbers require a valid exponent after the 'e'.\"),\n  InvalidOrUnexpectedToken: _(_ref19 => {\n    let {\n      unexpected\n    } = _ref19;\n    return `Unexpected character '${unexpected}'.`;\n  }),\n  InvalidParenthesizedAssignment: _(\"Invalid parenthesized assignment pattern.\"),\n  InvalidPrivateFieldResolution: _(_ref20 => {\n    let {\n      identifierName\n    } = _ref20;\n    return `Private name #${identifierName} is not defined.`;\n  }),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\"Only properties and spread elements are allowed in record definitions.\"),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _(_ref21 => {\n    let {\n      labelName\n    } = _ref21;\n    return `Label '${labelName}' is already declared.`;\n  }),\n  LetInLexicalBinding: _(\"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\"),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\"Only '=' operator can be used for specifying default value.\"),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _(_ref22 => {\n    let {\n      missingPlugin\n    } = _ref22;\n    return `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  }),\n  MissingOneOfPlugins: _(_ref23 => {\n    let {\n      missingPlugin\n    } = _ref23;\n    return `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  }),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\"Nullish coalescing operator(??) requires parens when mixing with logical operators.\"),\n  ModuleAttributeDifferentFromType: _(\"The only accepted module attribute is `type`.\"),\n  ModuleAttributeInvalidValue: _(\"Only string literals are allowed as module attribute values.\"),\n  ModuleAttributesWithDuplicateKeys: _(_ref24 => {\n    let {\n      key\n    } = _ref24;\n    return `Duplicate key \"${key}\" is not allowed in module attributes.`;\n  }),\n  ModuleExportNameHasLoneSurrogate: _(_ref25 => {\n    let {\n      surrogateCharCode\n    } = _ref25;\n    return `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`;\n  }),\n  ModuleExportUndefined: _(_ref26 => {\n    let {\n      localName\n    } = _ref26;\n    return `Export '${localName}' is not defined.`;\n  }),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\"),\n  ObsoleteAwaitStar: _(\"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\"),\n  OptionalChainingNoNew: _(\"Constructors in/after an Optional Chain are not allowed.\"),\n  OptionalChainingNoTemplate: _(\"Tagged Template Literals are not allowed in optionalChain.\"),\n  OverrideOnConstructor: _(\"'override' modifier cannot appear on a constructor declaration.\"),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _(_ref27 => {\n    let {\n      identifierName\n    } = _ref27;\n    return `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`;\n  }),\n  PrivateNameRedeclaration: _(_ref28 => {\n    let {\n      identifierName\n    } = _ref28;\n    return `Duplicate private name #${identifierName}.`;\n  }),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\"),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\"),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\"),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\"),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _('Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.'),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\"'import' and 'export' may only appear at the top level.\"),\n  UnexpectedKeyword: _(_ref29 => {\n    let {\n      keyword\n    } = _ref29;\n    return `Unexpected keyword '${keyword}'.`;\n  }),\n  UnexpectedLeadingDecorator: _(\"Leading decorators must be attached to a class declaration.\"),\n  UnexpectedLexicalDeclaration: _(\"Lexical declaration cannot appear in a single-statement context.\"),\n  UnexpectedNewTarget: _(\"`new.target` can only be used in functions or class properties.\"),\n  UnexpectedNumericSeparator: _(\"A numeric separator is only allowed between two digits.\"),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _(_ref30 => {\n    let {\n      reservedWord\n    } = _ref30;\n    return `Unexpected reserved word '${reservedWord}'.`;\n  }),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _(_ref31 => {\n    let {\n      expected,\n      unexpected\n    } = _ref31;\n    return `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`;\n  }),\n  UnexpectedTokenUnaryExponentiation: _(\"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\"),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\"A decorated export must export a class declaration.\"),\n  UnsupportedDefaultExport: _(\"Only expressions, functions or classes are allowed as the `default` export.\"),\n  UnsupportedImport: _(\"`import` can only be used in `import()` or `import.meta`.\"),\n  UnsupportedMetaProperty: _(_ref32 => {\n    let {\n      target,\n      onlyValidPropertyName\n    } = _ref32;\n    return `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`;\n  }),\n  UnsupportedParameterDecorator: _(\"Decorators cannot be used to decorate parameters.\"),\n  UnsupportedPropertyDecorator: _(\"Decorators cannot be used to decorate object literal properties.\"),\n  UnsupportedSuper: _(\"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\"),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _(_ref33 => {\n    let {\n      identifierName\n    } = _ref33;\n    return `Identifier '${identifierName}' has already been declared.`;\n  }),\n  YieldBindingIdentifier: _(\"Can not use 'yield' as identifier inside a generator.\"),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\"Numeric separator can not be used after leading 0.\")\n});\n\nvar StrictModeErrors = _ => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n  StrictEvalArguments: _(_ref34 => {\n    let {\n      referenceName\n    } = _ref34;\n    return `Assigning to '${referenceName}' in strict mode.`;\n  }),\n  StrictEvalArgumentsBinding: _(_ref35 => {\n    let {\n      bindingName\n    } = _ref35;\n    return `Binding '${bindingName}' in strict mode.`;\n  }),\n  StrictFunction: _(\"In strict mode code, functions can only be declared at top level or inside a block.\"),\n  StrictNumericEscape: _(\"The only valid numeric escape in strict mode is '\\\\0'.\"),\n  StrictOctalLiteral: _(\"Legacy octal literals are not allowed in strict mode.\"),\n  StrictWith: _(\"'with' in strict mode.\")\n});\n\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\n\nvar PipelineOperatorErrors = _ => ({\n  PipeBodyIsTighter: _(\"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\"),\n  PipeTopicRequiresHackPipes: _('Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'),\n  PipeTopicUnbound: _(\"Topic reference is unbound; it must be inside a pipe body.\"),\n  PipeTopicUnconfiguredToken: _(_ref36 => {\n    let {\n      token\n    } = _ref36;\n    return `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`;\n  }),\n  PipeTopicUnused: _(\"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\"),\n  PipeUnparenthesizedBody: _(_ref37 => {\n    let {\n      type\n    } = _ref37;\n    return `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type\n    })}; please wrap it in parentheses.`;\n  }),\n  PipelineBodyNoArrow: _('Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.'),\n  PipelineBodySequenceExpression: _(\"Pipeline body may not be a comma-separated sequence expression.\"),\n  PipelineHeadSequenceExpression: _(\"Pipeline head should not be a comma-separated sequence expression.\"),\n  PipelineTopicUnused: _(\"Pipeline is in topic style but does not use topic reference.\"),\n  PrimaryTopicNotAllowed: _(\"Topic reference was used in a lexical context without topic binding.\"),\n  PrimaryTopicRequiresSmartPipeline: _('Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.')\n});\n\nconst _excluded$1 = [\"toMessage\"];\n\nfunction toParseErrorConstructor(_ref) {\n  let {\n    toMessage\n  } = _ref,\n      properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  return function constructor(_ref38) {\n    let {\n      loc,\n      details\n    } = _ref38;\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc\n    }), {\n      clone() {\n        let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get() {\n          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;\n        },\n\n        set(value) {\n          Object.defineProperty(this, \"message\", {\n            value\n          });\n        }\n\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\n\nfunction toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return Object.assign({\n    toMessage: typeof toMessageOrMessage === \"string\" ? () => toMessageOrMessage : toMessageOrMessage\n  }, credentials);\n}\n\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap => ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, partialCredentials[reasonCode]));\n  }\n\n  return ParseErrorConstructors;\n}\n\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\n\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\n\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\n\nvar estree = superClass => class extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n\n    return file;\n  }\n\n  parseRegExpLiteral(_ref39) {\n    let {\n      pattern,\n      flags\n    } = _ref39;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isValidLVal(type) {\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      rest[_key2 - 1] = arguments[_key2];\n    }\n\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n\n      this.toAssignable(value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, {\n        at: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 128;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 128;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 132;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 125 && token <= 127;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 117 && token <= 119;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 120 && token <= 126;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[138].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 135;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref40) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref40;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nconst _excluded = [\"at\"],\n      _excluded2 = [\"at\"];\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach(_ref41 => {\n        let [toParseError, at] = _ref41;\n        return this.raise(toParseError, {\n          at\n        });\n      });\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(135);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n\n      if (lookaheadCh === 94) {\n        throw this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(51, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(47, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(52, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(48, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        this.readToken_atSign();\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(133, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95 && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition()\n          });\n        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition()\n          });\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix\n      });\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(131, str);\n      return;\n    }\n\n    this.finishToken(130, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n        at: startLoc\n      });\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(131, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(132, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(130, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, {\n            at: this.state.curPosition()\n          });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(129, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(toParseError, _ref42) {\n    let {\n      at\n    } = _ref42;\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, {\n        at\n      });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1)\n          });\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);\n          const match = this.input.slice(this.state.pos - 1, this.state.pos + 2).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, {\n          at: codeLoc\n        });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(128, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n\n  raise(toParseError, raiseProperties) {\n    const {\n      at\n    } = raiseProperties,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({\n      loc,\n      details\n    });\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n\n  raiseOverwrite(toParseError, raiseProperties) {\n    const {\n      at\n    } = raiseProperties,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError({\n          loc,\n          details\n        });\n      }\n\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  updateContext(prevType) {}\n\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName]\n    });\n  }\n\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames\n      });\n    }\n  }\n\n}\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, loc) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n\n  recordDeclarationError(ParsingErrorClass, _ref43) {\n    let {\n      at\n    } = _ref43;\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(toParseError, _ref44) {\n    let {\n      at: node\n    } = _ref44;\n    const origin = {\n      at: node.loc.start\n    };\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.parser.raise(toParseError, origin);\n  }\n\n  recordParenthesizedIdentifierError(_ref45) {\n    let {\n      at: node\n    } = _ref45;\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = {\n      at: node.loc.start\n    };\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(Errors.InvalidParenthesizedAssignment, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(Errors.InvalidParenthesizedAssignment, origin);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(_ref46) {\n    let {\n      at\n    } = _ref46;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n          at\n        });\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(_ref47 => {\n      let [toParseError, loc] = _ref47;\n      this.parser.raise(toParseError, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value) {\n    let enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, {\n          at: this.state.startLoc\n        });\n      }\n\n      throw this.unexpected(null, token);\n    }\n  }\n\n  canInsertSemicolon() {\n    return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\"),\n  AmbiguousDeclareModuleKind: _(\"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\"),\n  AssignReservedType: _(_ref48 => {\n    let {\n      reservedType\n    } = _ref48;\n    return `Cannot overwrite reserved type ${reservedType}.`;\n  }),\n  DeclareClassElement: _(\"The `declare` modifier can only appear on class fields.\"),\n  DeclareClassFieldInitializer: _(\"Initializers are not allowed in fields with the `declare` modifier.\"),\n  DuplicateDeclareModuleExports: _(\"Duplicate `declare module.exports` statement.\"),\n  EnumBooleanMemberNotInitialized: _(_ref49 => {\n    let {\n      memberName,\n      enumName\n    } = _ref49;\n    return `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumDuplicateMemberName: _(_ref50 => {\n    let {\n      memberName,\n      enumName\n    } = _ref50;\n    return `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`;\n  }),\n  EnumInconsistentMemberValues: _(_ref51 => {\n    let {\n      enumName\n    } = _ref51;\n    return `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`;\n  }),\n  EnumInvalidExplicitType: _(_ref52 => {\n    let {\n      invalidEnumType,\n      enumName\n    } = _ref52;\n    return `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidExplicitTypeUnknownSupplied: _(_ref53 => {\n    let {\n      enumName\n    } = _ref53;\n    return `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidMemberInitializerPrimaryType: _(_ref54 => {\n    let {\n      enumName,\n      memberName,\n      explicitType\n    } = _ref54;\n    return `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`;\n  }),\n  EnumInvalidMemberInitializerSymbolType: _(_ref55 => {\n    let {\n      enumName,\n      memberName\n    } = _ref55;\n    return `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidMemberInitializerUnknownType: _(_ref56 => {\n    let {\n      enumName,\n      memberName\n    } = _ref56;\n    return `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`;\n  }),\n  EnumInvalidMemberName: _(_ref57 => {\n    let {\n      enumName,\n      memberName,\n      suggestion\n    } = _ref57;\n    return `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`;\n  }),\n  EnumNumberMemberNotInitialized: _(_ref58 => {\n    let {\n      enumName,\n      memberName\n    } = _ref58;\n    return `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`;\n  }),\n  EnumStringMemberInconsistentlyInitailized: _(_ref59 => {\n    let {\n      enumName\n    } = _ref59;\n    return `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`;\n  }),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\"),\n  InexactInsideExact: _(\"Explicit inexact syntax cannot appear inside an explicit exact object type.\"),\n  InexactInsideNonObject: _(\"Explicit inexact syntax cannot appear in class or interface definitions.\"),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\"Imports within a `declare module` body must always be `import type` or `import typeof`.\"),\n  MissingTypeParamDefault: _(\"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\"),\n  NestedDeclareModule: _(\"`declare module` cannot be used inside another `declare module`.\"),\n  NestedFlowComment: _(\"Cannot have a flow comment inside another flow comment.\"),\n  PatternIsOptional: _(\"A binding pattern parameter cannot be optional in an implementation signature.\", {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\"A type annotation is required for the `this` parameter.\"),\n  ThisParamBannedInConstructor: _(\"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\"),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\"The `this` parameter must be the first function parameter.\"),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\"),\n  TypeCastInPattern: _(\"The type cast expression is expected to be wrapped with parenthesis.\"),\n  UnexpectedExplicitInexactInObject: _(\"Explicit inexact syntax must appear at the end of an inexact object.\"),\n  UnexpectedReservedType: _(_ref60 => {\n    let {\n      reservedType\n    } = _ref60;\n    return `Unexpected reserved type ${reservedType}.`;\n  }),\n  UnexpectedReservedUnderscore: _(\"`_` is only allowed as a type argument to call or new.\"),\n  UnexpectedSpaceBetweenModuloChecks: _(\"Spaces between `%` and `checks` are not allowed here.\"),\n  UnexpectedSpreadType: _(\"Spread operator cannot appear in class or interface definitions.\"),\n  UnexpectedSubtractionOperand: _('Unexpected token, expected \"number\" or \"bigint\".'),\n  UnexpectedTokenAfterTypeParameter: _(\"Expected an arrow function after this type parameter declaration.\"),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\"),\n  UnsupportedDeclareExportKind: _(_ref61 => {\n    let {\n      unsupportedExportKind,\n      suggestion\n    } = _ref61;\n    return `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`;\n  }),\n  UnsupportedStatementInDeclareModule: _(\"Only declares and type imports are allowed inside declare module.\"),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\")\n}));\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 129 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(107);\n\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(123)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(126)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(125)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(83)) {\n        this.next();\n\n        if (!this.isContextual(126) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            at: bodyElement\n          });\n        }\n\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc,\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(108);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc,\n      reservedType: word\n    });\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(126);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(125);\n    node.extends = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref62) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref62;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(115)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            at: variance\n          });\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          at: variance\n        });\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            at: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        at: property.value.this\n      });\n    }\n\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: property\n      });\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: property\n      });\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node\n        });\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            at: node\n          });\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 129:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(130)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(131)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n\n        throw this.unexpected();\n\n      case 130:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 131:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 87:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(125)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 128 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(53)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(125)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(126)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(125)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(126) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n\n    if (this.isContextual(121)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          at: member.value\n        });\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, {\n        at: this.state.curPosition(),\n        identifierName: fullWord\n      });\n    }\n\n    this.finishToken(128, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          at: expr.typeAnnotation\n        });\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  isValidLVal(type) {\n    for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      rest[_key4 - 1] = arguments[_key4];\n    }\n\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          at: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          at: param\n        });\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          at: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        at: param\n      });\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        at: param\n      });\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        at: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(87)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(126)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 55) {\n        this.unexpected(null, lh.type);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: firstIdent.value\n          });\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        at: specifier\n      });\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              at: typeParameters\n            });\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        at: typeParameters\n      });\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node.params[i]\n        });\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos = end + 2 + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(loc, _ref63) {\n    let {\n      enumName,\n      memberName\n    } = _ref63;\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc,\n      memberName,\n      enumName\n    });\n  }\n\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n      at: loc\n    }, enumContext));\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(loc, _ref64) {\n    let {\n      enumName,\n      memberName\n    } = _ref64;\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc,\n      enumName,\n      memberName\n    });\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref65) {\n    let {\n      enumName\n    } = _ref65;\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      at: node,\n      enumName\n    });\n  }\n\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 130:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 129:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n\n  flowEnumMembers(_ref66) {\n    let {\n      enumName,\n      explicitType\n    } = _ref66;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          at: id,\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          at: id,\n          memberName,\n          enumName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref67) {\n    let {\n      enumName\n    } = _ref67;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref68) {\n    let {\n      enumName\n    } = _ref68;\n    if (!this.eatContextual(101)) return null;\n\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n        at: this.state.startLoc,\n        enumName\n      });\n    }\n\n    const {\n      value\n    } = this.state;\n    this.next();\n\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, {\n        at: this.state.startLoc,\n        enumName,\n        invalidEnumType: value\n      });\n    }\n\n    return value;\n  }\n\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\"JSX attributes must only be assigned a non-empty expression.\"),\n  MissingClosingTagElement: _(_ref69 => {\n    let {\n      openingTagName\n    } = _ref69;\n    return `Expected corresponding JSX closing tag for <${openingTagName}>.`;\n  }),\n  MissingClosingTagFragment: _(\"Expected corresponding JSX closing tag for <>.\"),\n  UnexpectedSequenceExpression: _(\"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\"),\n  UnexpectedToken: _(_ref70 => {\n    let {\n      unexpected,\n      HTMLEntity\n    } = _ref70;\n    return `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`;\n  }),\n  UnsupportedJsxValue: _(\"JSX value should be either an expression or a quoted JSX text.\"),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\")\n}));\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(138);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(137, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(129, out);\n  }\n\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n\n    this.state.pos = startPos;\n    return \"&\";\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(136, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(136)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            at: node\n          });\n        }\n\n        return node;\n\n      case 138:\n      case 129:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(56) && !this.match(139)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(139);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(139);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 138:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 137:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          at: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          at: closingElement,\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(137)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(138)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(138);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(139);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(138);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 56 && prevType === 138) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 138) {\n      context.push(types.j_oTag);\n    } else if (type === 139) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _(_ref71 => {\n    let {\n      methodName\n    } = _ref71;\n    return `Method '${methodName}' cannot have an implementation because it is marked abstract.`;\n  }),\n  AbstractPropertyHasInitializer: _(_ref72 => {\n    let {\n      propertyName\n    } = _ref72;\n    return `Property '${propertyName}' cannot have an initializer because it is marked abstract.`;\n  }),\n  AccesorCannotDeclareThisParameter: _(\"'get' and 'set' accessors cannot declare 'this' parameters.\"),\n  AccesorCannotHaveTypeParameters: _(\"An accessor cannot have type parameters.\"),\n  CannotFindName: _(_ref73 => {\n    let {\n      name\n    } = _ref73;\n    return `Cannot find name '${name}'.`;\n  }),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\"Class methods cannot have the 'readonly' modifier.\"),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\"),\n  ConstructorHasTypeParameters: _(\"Type parameters cannot appear on a constructor declaration.\"),\n  DeclareAccessor: _(_ref74 => {\n    let {\n      kind\n    } = _ref74;\n    return `'declare' is not allowed in ${kind}ters.`;\n  }),\n  DeclareClassFieldHasInitializer: _(\"Initializers are not allowed in ambient contexts.\"),\n  DeclareFunctionHasImplementation: _(\"An implementation cannot be declared in ambient contexts.\"),\n  DuplicateAccessibilityModifier: _(_ref75 => {\n    let {\n      modifier\n    } = _ref75;\n    return `Accessibility modifier already seen.`;\n  }),\n  DuplicateModifier: _(_ref76 => {\n    let {\n      modifier\n    } = _ref76;\n    return `Duplicate modifier: '${modifier}'.`;\n  }),\n  EmptyHeritageClauseType: _(_ref77 => {\n    let {\n      token\n    } = _ref77;\n    return `'${token}' list cannot be empty.`;\n  }),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\"'export declare' must be followed by an ambient declaration.\"),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _(_ref78 => {\n    let {\n      modifiers\n    } = _ref78;\n    return `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`;\n  }),\n  IndexSignatureHasAbstract: _(\"Index signatures cannot have the 'abstract' modifier.\"),\n  IndexSignatureHasAccessibility: _(_ref79 => {\n    let {\n      modifier\n    } = _ref79;\n    return `Index signatures cannot have an accessibility modifier ('${modifier}').`;\n  }),\n  IndexSignatureHasDeclare: _(\"Index signatures cannot have the 'declare' modifier.\"),\n  IndexSignatureHasOverride: _(\"'override' modifier cannot appear on an index signature.\"),\n  IndexSignatureHasStatic: _(\"Index signatures cannot have the 'static' modifier.\"),\n  InitializerNotAllowedInAmbientContext: _(\"Initializers are not allowed in ambient contexts.\"),\n  InvalidModifierOnTypeMember: _(_ref80 => {\n    let {\n      modifier\n    } = _ref80;\n    return `'${modifier}' modifier cannot appear on a type member.`;\n  }),\n  InvalidModifiersOrder: _(_ref81 => {\n    let {\n      orderedModifiers\n    } = _ref81;\n    return `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`;\n  }),\n  InvalidTupleMemberLabel: _(\"Tuple members must be labeled with a simple identifier.\"),\n  MissingInterfaceName: _(\"'interface' declarations must be followed by an identifier.\"),\n  MixedLabeledAndUnlabeledElements: _(\"Tuple members must all have names or all not have names.\"),\n  NonAbstractClassHasAbstractMethod: _(\"Abstract methods can only appear within an abstract class.\"),\n  NonClassMethodPropertyHasAbstractModifer: _(\"'abstract' modifier can only appear on a class, method, or property declaration.\"),\n  OptionalTypeBeforeRequired: _(\"A required element cannot follow an optional element.\"),\n  OverrideNotInSubClass: _(\"This member cannot have an 'override' modifier because its containing class does not extend another class.\"),\n  PatternIsOptional: _(\"A binding pattern parameter cannot be optional in an implementation signature.\"),\n  PrivateElementHasAbstract: _(\"Private elements cannot have the 'abstract' modifier.\"),\n  PrivateElementHasAccessibility: _(_ref82 => {\n    let {\n      modifier\n    } = _ref82;\n    return `Private elements cannot have an accessibility modifier ('${modifier}').`;\n  }),\n  ReadonlyForMethodSignature: _(\"'readonly' modifier can only appear on a property declaration or index signature.\"),\n  ReservedArrowTypeParam: _(\"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\"),\n  ReservedTypeAssertion: _(\"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\"),\n  SetAccesorCannotHaveOptionalParameter: _(\"A 'set' accessor cannot have an optional parameter.\"),\n  SetAccesorCannotHaveRestParameter: _(\"A 'set' accessor cannot have rest parameter.\"),\n  SetAccesorCannotHaveReturnType: _(\"A 'set' accessor cannot have a return type annotation.\"),\n  SingleTypeParameterWithoutTrailingComma: _(_ref83 => {\n    let {\n      typeParameterName\n    } = _ref83;\n    return `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`;\n  }),\n  StaticBlockCannotHaveModifier: _(\"Static class blocks cannot have any modifier.\"),\n  TypeAnnotationAfterAssign: _(\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\"),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\"A type-only import can specify a default import or named bindings, but not both.\"),\n  TypeModifierIsUsedInTypeExports: _(\"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\"),\n  TypeModifierIsUsedInTypeImports: _(\"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\"),\n  UnexpectedParameterModifier: _(\"A parameter property is only allowed in a constructor implementation.\"),\n  UnexpectedReadonly: _(\"'readonly' type modifier is only permitted on array and tuple literal types.\"),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\"Unexpected type cast in parameter position.\"),\n  UnsupportedImportTypeArgument: _(\"Argument in a type import must be a string literal.\"),\n  UnsupportedParameterPropertyKind: _(\"A parameter property may not be declared using a binding pattern.\"),\n  UnsupportedSignatureParameterKind: _(_ref84 => {\n    let {\n      type\n    } = _ref84;\n    return `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`;\n  })\n}));\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(_ref85) {\n    let {\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock\n    } = _ref85;\n\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc,\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc,\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(TSErrors.InvalidModifierOnTypeMember, {\n          at: startLoc,\n          modifier\n        });\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName() {\n    let allowReservedWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let entity = this.parseIdentifier(allowReservedWords);\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        at: node\n      });\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type !== 75) return null;\n    this.next();\n    const typeReference = this.tsParseTypeReference();\n\n    if (typeReference.typeParameters) {\n      this.raise(TSErrors.CannotFindName, {\n        at: typeReference.typeName,\n        name: \"const\"\n      });\n    }\n\n    return typeReference;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          at: pattern,\n          type: pattern.type\n        });\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          at: node\n        });\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            at: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    });\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(53)) {\n      return this.isContextual(118);\n    }\n\n    if (this.isContextual(118)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(58);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(118);\n    } else if (this.eatContextual(118)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          at: elementNode\n        });\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          at: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          at: type\n        });\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 130:\n        case 131:\n        case 129:\n        case 85:\n        case 86:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 129:\n      case 130:\n      case 131:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 130 && nextToken.type !== 131) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 87:\n        return this.tsParseTypeQuery();\n\n      case 83:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          at: node\n        });\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n\n      try {\n        this.parseBindingList(3, 93, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 106) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc,\n        reservedWord: \"asserts\"\n      });\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(120) && this.lookahead().type === 77;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc,\n        token\n      });\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName();\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(125);\n    if (properties.declare) node.declare = true;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_TS_TYPE);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(29);\n\n      if (this.isContextual(111) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(122);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(109)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        at: moduleReference\n      });\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(116) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(116);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(99)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      if (starttype === 68) {\n        nany.declare = true;\n        return this.parseFunctionStatement(nany, false, true);\n      }\n\n      if (starttype === 80) {\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n      }\n\n      if (starttype === 122) {\n        return this.tsParseEnumDeclaration(nany, {\n          declare: true\n        });\n      }\n\n      if (starttype === 109) {\n        return this.tsParseAmbientExternalModuleDeclaration(nany);\n      }\n\n      if (starttype === 75 || starttype === 74) {\n        if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n          nany.declare = true;\n          return this.parseVarStatement(nany, kind || this.state.value, true);\n        }\n\n        this.expect(75);\n        return this.tsParseEnumDeclaration(nany, {\n          const: true,\n          declare: true\n        });\n      }\n\n      if (starttype === 125) {\n        const result = this.tsParseInterfaceDeclaration(nany, {\n          declare: true\n        });\n        if (result) return result;\n      }\n\n      if (tokenIsIdentifier(starttype)) {\n        return this.tsParseDeclaration(nany, this.state.value, true);\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(129)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(47)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) {\n      return undefined;\n    }\n\n    return this.tsParseTypeArguments();\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        at: node\n      });\n    }\n\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers({\n        modified,\n        allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n      });\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(TSErrors.UnexpectedParameterModifier, {\n          at: startLoc\n        });\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          at: pp\n        });\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        at: node\n      });\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          at: node.typeAnnotation\n        });\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorLoc = this.state.curPosition();\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArgumentsInExpression();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        at: importNode\n      });\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(83)) {\n      this.next();\n\n      if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(124);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(126) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(120) && this.lookahead().type === 80;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(125)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n          at: init\n        });\n      } else if (init.type !== \"StringLiteral\" && init.type !== \"BooleanLiteral\" && init.type !== \"NumericLiteral\" && init.type !== \"BigIntLiteral\" && (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) && !isPossiblyLiteralEnum(init)) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n          at: init\n        });\n      }\n    }\n\n    return declaration;\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n\n    if (this.isContextual(122)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n\n    if (this.isContextual(125)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      modified: member,\n      allowedModifiers: modifiers,\n      stopOnStartOfClassStaticBlock: true\n    });\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          at: member\n        });\n      }\n\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          at: member,\n          modifier: member.accessibility\n        });\n      }\n\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          at: member\n        });\n      }\n\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          at: member\n        });\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        at: member\n      });\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          at: member\n        });\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        at: methodOrProp\n      });\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        at: methodOrProp\n      });\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(121)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(121);\n\n    if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(110)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc,\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        at: node\n      });\n    }\n\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        at: node,\n        modifier: node.accessibility\n      });\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        at: typeParameters\n      });\n    }\n\n    const {\n      declare = false,\n      kind\n    } = method;\n\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        at: method,\n        kind\n      });\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n\n    if (this.eatContextual(110)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      args[_key5 - 1] = arguments[_key5];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters, _expr$typeParameters$;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n\n      if (this.hasPlugin(\"jsx\") && expr.typeParameters.params.length === 1 && !((_expr$typeParameters$ = expr.typeParameters.extra) != null && _expr$typeParameters$.trailingComma)) {\n        const parameter = expr.typeParameters.params[0];\n        if (!parameter.constraint) ;\n      }\n\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        at: node\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(TSErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  isValidLVal(type, isParenthesized, binding) {\n    return getOwn$1({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== BIND_NONE || isParenthesized) && [\"expression\", true],\n      TSTypeAssertion: (binding !== BIND_NONE || isParenthesized) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isParenthesized, binding);\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(null, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    } else {\n      return super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        at: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(48, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(47, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n\n    return type;\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n              at: expr\n            });\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        args[_key7 - 1] = arguments[_key7];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(125)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          at: node\n        });\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          at: method,\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n    }\n  }\n\n};\n\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\")\n}));\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(140)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(140);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(140, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  isValidLVal(type) {\n    for (var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      rest[_key8 - 1] = arguments[_key8];\n    }\n\n    return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 140) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(81) || this.match(140) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError({\n            at: node\n          });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, {\n          at: node\n        });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n\n          this.toAssignable(value, isLHS);\n          break;\n        }\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, {\n        at: prop\n      });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, {\n            at: elt\n          });\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 134) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  isValidLVal(type, isParenthesized, binding) {\n    return getOwn({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n\n  checkLVal(expression, _ref86) {\n    let {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false\n    } = _ref86;\n\n    var _expression$extra;\n\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, {\n          at: expression\n        });\n      }\n\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);\n      const {\n        name\n      } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, {\n            at: expression\n          });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(expression.type, hasParenthesizedAncestor || ((_expression$extra = expression.extra) == null ? void 0 : _expression$extra.parenthesized), binding);\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor: ancestor.type === \"UpdateExpression\" ? {\n          type: \"UpdateExpression\",\n          prefix: ancestor.prefix\n        } : {\n          type: ancestor.type\n        }\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = expression.type === \"ArrayPattern\" || expression.type === \"ObjectPattern\" || expression.type === \"ParenthesizedExpression\" ? expression : ancestor;\n\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n\n  checkIdentifier(at, bindingType) {\n    let strictModeChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let allowLetBinding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !(bindingType & BIND_SCOPE_LEXICAL);\n\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, {\n          at,\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, {\n        at\n      });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        at: node.argument\n      });\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, {\n          at: key\n        });\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, {\n            at: key\n          });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(135)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(105)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n\n        this.next();\n\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(105)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                });\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, {\n            at: node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, {\n            at: node\n          });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n          at: startLoc\n        });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\")\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(134)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount: this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, {\n              at: arg\n            });\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n\n      case 83:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 130:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 131:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 132:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 129:\n        return this.parseStringLiteral(this.state.value);\n\n      case 84:\n        return this.parseNullLiteral();\n\n      case 85:\n        return this.parseBooleanLiteral(true);\n\n      case 86:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 80:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 77:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, {\n              at: callee\n            });\n          }\n        }\n\n      case 134:\n        {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: this.state.startLoc,\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, {\n        at: node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, {\n        at: node\n      });\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, {\n        at: node\n      });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, {\n          at: id\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(startPos, startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n      this.takeSurroundingComments(expression, startPos, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, {\n          at: metaProp\n        });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, {\n        at: node.callee\n      });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc\n      });\n    } else if (this.eat(18)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(startLoc, 2)\n        });\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, {\n          at: prop\n        });\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName\n          });\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: method\n      });\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: method\n      });\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 130:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 129:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 131:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 132:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 134:\n            {\n              const privateKeyLoc = this.state.startLoc;\n\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 134) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, {\n            at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n          });\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\"\n        });\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(128);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({\n        at: startLoc\n      });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word\n      });\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n      at: node\n    });\n\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, {\n        at: node\n      });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n      at: node\n    });\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n\n      switch (this.state.type) {\n        case 13:\n        case 135:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 134) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(128),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 135;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, {\n          at,\n          localName\n        });\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 64:\n        return this.parseDebuggerStatement(node);\n\n      case 90:\n        return this.parseDoStatement(node);\n\n      case 91:\n        return this.parseForStatement(node);\n\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, {\n              at: this.state.startLoc\n            });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 80:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 69:\n        return this.parseIfStatement(node);\n\n      case 70:\n        return this.parseReturnStatement(node);\n\n      case 71:\n        return this.parseSwitchStatement(node);\n\n      case 72:\n        return this.parseThrowStatement(node);\n\n      case 73:\n        return this.parseTryStatement(node);\n\n      case 75:\n      case 74:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 92:\n        return this.parseWhileStatement(node);\n\n      case 76:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 83) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, {\n        at: node\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.match(10)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, {\n        at: node,\n        type\n      });\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(99);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(74) || this.match(75) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(58) || this.isContextual(101)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, {\n          at: init\n        });\n      }\n\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, {\n          at: init\n        });\n      }\n    }\n\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(66) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true\n    });\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, {\n        at: node\n      });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    let allowMissingInitializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const declarations = node.declarations = [];\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\"\n          });\n        }\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n    });\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(55) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.generator = this.eat(55);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, {\n            at: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(134);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key\n        });\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(134);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, {\n            at: key\n          });\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, {\n            at: key\n          });\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(134);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n\n    if ((type === 128 || type === 129) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (type === 134) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, {\n        at: member\n      });\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, {\n        at: prop.key\n      });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, {\n          at: key\n        });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(65)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(68) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    }\n\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n\n      if ((type === 126 || type === 125) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, {\n        at: node\n      });\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, {\n          at: node\n        });\n      } else {\n        this.raise(Errors.DuplicateExport, {\n          at: node,\n          exportName\n        });\n      }\n    }\n\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(126);\n      const isString = this.match(129);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(129)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(129)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(129)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier, type) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName\n        });\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(129)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(76) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name\n        });\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(129);\n      const isMaybeTypeOnly = this.isContextual(126);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value\n        });\n      }\n\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"mappings":"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","names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","_","ImportMetaOutsideModule","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","_ref","toMessage","loc","details","clone","overrides","message","pos","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","raise","at","finishCallExpression","optional","callee","source","arguments","hasPlugin","attributes","_node$arguments$","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","createKeywordLike","_options$binop2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","Token","Tokenizer","isLookahead","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","Number","isNaN","_isDigit","errorRecovery","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","_node$extra","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifiersOrder","orderedModifiers","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","trailingComma","reportReservedArrowTypeParam","_typeCast","toAssignableParenthesizedExpression","isParenthesized","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","isLast","_node$extra2","checkToRestConversion","arg","_node$extra3","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","_startLoc","_startPos","_left","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","_expression$extra","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\location.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error\\credentials.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error\\module-errors.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error\\to-node-description.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error\\standard-errors.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error\\strict-mode-errors.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error\\pipeline-operator-errors.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parse-error.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\estree.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\tokenizer\\context.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\tokenizer\\types.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\babel-helper-validator-identifier\\src\\identifier.ts","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\babel-helper-validator-identifier\\src\\keyword.ts","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\identifier.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\scopeflags.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\base.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\comments.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\whitespace.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\tokenizer\\state.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\tokenizer\\index.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\scope.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\flow\\scope.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\class-scope.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\expression-scope.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\util\\production-parameter.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\util.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\node.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\flow\\index.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\jsx\\xhtml.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\jsx\\index.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\typescript\\scope.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\typescript\\index.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\placeholders.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugins\\v8intrinsic.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\plugin-utils.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\options.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\lval.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\expression.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\statement.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\parser\\index.js","C:\\Users\\Arber\\Documents\\GitHub\\Food-delivery-app-LabCouse1\\Food-delivery-app-LabCouse1\\front-end-code\\node_modules\\@babel\\parser\\src\\index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: ch => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: ch => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: ch => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: ch =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling =\n      radix === 16\n        ? isAllowedNumericSeparatorSibling.hex\n        : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n        ? isAllowedNumericSeparatorSibling.oct\n        : isAllowedNumericSeparatorSibling.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !isAllowedSibling(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .slice(this.state.pos - 1, this.state.pos + 2)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ArrowHeadParsingDeclarationError, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError<T: ArrowHeadParsingDeclarationError>(\n    ParsingErrorClass: T,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError({ at: node }: { at: Node }): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(Errors.InvalidParenthesizedAssignment, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(\n        Errors.InvalidParenthesizedAssignment,\n        origin,\n      );\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(TSErrors.InvalidModifierOnTypeMember, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        stopOnStartOfClassStaticBlock: true,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      let invalidSingleType: ?N.TsTypeParameter;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        // report error if single type parameter used without trailing comma.\n        if (\n          this.hasPlugin(\"jsx\") &&\n          expr.typeParameters.params.length === 1 &&\n          !expr.typeParameters.extra?.trailingComma\n        ) {\n          const parameter = expr.typeParameters.params[0];\n          if (!parameter.constraint) {\n            // A single type parameter must either have constraints\n            // or a trailing comma, otherwise it's ambiguous with JSX.\n            invalidSingleType = parameter;\n          }\n        }\n\n        return expr;\n      }, state);\n\n      if (process.env.BABEL_8_BREAKING) {\n        if (invalidSingleType) {\n          this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n            at: createPositionWithColumnOffset(invalidSingleType.loc.end, 1),\n            typeParameterName: invalidSingleType.name.name,\n          });\n        }\n      }\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE || isParenthesized) && [\n              \"expression\",\n              true,\n            ],\n            TSTypeAssertion: (binding !== BIND_NONE || isParenthesized) && [\n              \"expression\",\n              true,\n            ],\n          },\n          type,\n        ) || super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                at: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError({ at: node });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { at: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isParenthesized\n   *        Whether the node in question is parenthesized.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      hasParenthesizedAncestor || expression.extra?.parenthesized,\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        at: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}