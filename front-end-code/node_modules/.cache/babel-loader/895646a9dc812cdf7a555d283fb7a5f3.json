{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;\nexports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;\nexports._resolve = _resolve;\nexports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;\nexports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;\nexports.equals = equals;\nexports.getSource = getSource;\nexports.has = has;\nexports.is = void 0;\nexports.isCompletionRecord = isCompletionRecord;\nexports.isConstantExpression = isConstantExpression;\nexports.isInStrictMode = isInStrictMode;\nexports.isNodeType = isNodeType;\nexports.isStatementOrBlock = isStatementOrBlock;\nexports.isStatic = isStatic;\nexports.isnt = isnt;\nexports.matchesPattern = matchesPattern;\nexports.referencesImport = referencesImport;\nexports.resolve = resolve;\nexports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern: _matchesPattern\n} = _t;\n\nfunction matchesPattern(pattern, allowPartial) {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n\nfunction has(key) {\n  const val = this.node && this.node[key];\n\n  if (val && Array.isArray(val)) {\n    return !!val.length;\n  } else {\n    return !!val;\n  }\n}\n\nfunction isStatic() {\n  return this.scope.isStatic(this.node);\n}\n\nconst is = has;\nexports.is = is;\n\nfunction isnt(key) {\n  return !this.has(key);\n}\n\nfunction equals(key, value) {\n  return this.node[key] === value;\n}\n\nfunction isNodeType(type) {\n  return isType(this.type, type);\n}\n\nfunction canHaveVariableDeclarationOrExpression() {\n  return (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor();\n}\n\nfunction canSwapBetweenExpressionAndStatement(replacement) {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n\n  return false;\n}\n\nfunction isCompletionRecord(allowInsideFunction) {\n  let path = this;\n  let first = true;\n\n  do {\n    const container = path.container;\n\n    if (path.isFunction() && !first) {\n      return !!allowInsideFunction;\n    }\n\n    first = false;\n\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while ((path = path.parentPath) && !path.isProgram());\n\n  return true;\n}\n\nfunction isStatementOrBlock() {\n  if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key);\n  }\n}\n\nfunction referencesImport(moduleSource, importName) {\n  if (!this.isReferencedIdentifier()) {\n    if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {\n      value: importName\n    }) : this.node.property.name === importName)) {\n      const object = this.get(\"object\");\n      return object.isReferencedIdentifier() && object.referencesImport(moduleSource, \"*\");\n    }\n\n    return false;\n  }\n\n  const binding = this.scope.getBinding(this.node.name);\n  if (!binding || binding.kind !== \"module\") return false;\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n\n  if (path.isImportSpecifier() && isIdentifier(path.node.imported, {\n    name: importName\n  })) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getSource() {\n  const node = this.node;\n\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n\n  return \"\";\n}\n\nfunction willIMaybeExecuteBefore(target) {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\n\nfunction getOuterFunction(path) {\n  return (path.scope.getFunctionParent() || path.scope.getProgramParent()).path;\n}\n\nfunction isExecutionUncertain(type, key) {\n  switch (type) {\n    case \"LogicalExpression\":\n      return key === \"right\";\n\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      return key === \"consequent\" || key === \"alternate\";\n\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      return key === \"body\";\n\n    case \"ForStatement\":\n      return key === \"body\" || key === \"update\";\n\n    case \"SwitchStatement\":\n      return key === \"cases\";\n\n    case \"TryStatement\":\n      return key === \"handler\";\n\n    case \"AssignmentPattern\":\n      return key === \"right\";\n\n    case \"OptionalMemberExpression\":\n      return key === \"property\";\n\n    case \"OptionalCallExpression\":\n      return key === \"arguments\";\n\n    default:\n      return false;\n  }\n}\n\nfunction isExecutionUncertainInList(paths, maxIndex) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _guessExecutionStatusRelativeTo(target) {\n  const funcParent = {\n    this: getOuterFunction(this),\n    target: getOuterFunction(target)\n  };\n\n  if (funcParent.target.node !== funcParent.this.node) {\n    return this._guessExecutionStatusRelativeToDifferentFunctions(funcParent.target);\n  }\n\n  const paths = {\n    target: target.getAncestry(),\n    this: this.getAncestry()\n  };\n  if (paths.target.indexOf(this) >= 0) return \"after\";\n  if (paths.this.indexOf(target) >= 0) return \"before\";\n  let commonPath;\n  const commonIndex = {\n    target: 0,\n    this: 0\n  };\n\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n\n  if (!commonPath) {\n    throw new Error(\"Internal Babel error - The two compared nodes\" + \" don't appear to belong to the same program.\");\n  }\n\n  if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {\n    return \"unknown\";\n  }\n\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1]\n  };\n\n  if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\n  }\n\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey)\n  };\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\n}\n\nconst executionOrderCheckedNodes = new WeakSet();\n\nfunction _guessExecutionStatusRelativeToDifferentFunctions(target) {\n  if (!target.isFunctionDeclaration() || target.parentPath.isExportDeclaration()) {\n    return \"unknown\";\n  }\n\n  const binding = target.scope.getBinding(target.node.id.name);\n  if (!binding.references) return \"before\";\n  const referencePaths = binding.referencePaths;\n  let allStatus;\n\n  for (const path of referencePaths) {\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      return \"unknown\";\n    }\n\n    if (executionOrderCheckedNodes.has(path.node)) continue;\n    executionOrderCheckedNodes.add(path.node);\n\n    const status = this._guessExecutionStatusRelativeTo(path);\n\n    executionOrderCheckedNodes.delete(path.node);\n\n    if (allStatus && allStatus !== status) {\n      return \"unknown\";\n    } else {\n      allStatus = status;\n    }\n  }\n\n  return allStatus;\n}\n\nfunction resolve(dangerous, resolved) {\n  return this._resolve(dangerous, resolved) || this;\n}\n\nfunction _resolve(dangerous, resolved) {\n  if (resolved && resolved.indexOf(this) >= 0) return;\n  resolved = resolved || [];\n  resolved.push(this);\n\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {}\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n    if (!binding.constant) return;\n    if (binding.kind === \"module\") return;\n\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n    const targetName = targetKey.value;\n    const target = this.get(\"object\").resolve(dangerous, resolved);\n\n    if (target.isObjectExpression()) {\n      const props = target.get(\"properties\");\n\n      for (const prop of props) {\n        if (!prop.isProperty()) continue;\n        const key = prop.get(\"key\");\n        let match = prop.isnt(\"computed\") && key.isIdentifier({\n          name: targetName\n        });\n        match = match || key.isLiteral({\n          value: targetName\n        });\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get(\"elements\");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\n\nfunction isConstantExpression() {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n\n    if (this.isTemplateLiteral()) {\n      return this.get(\"expressions\").every(expression => expression.isConstantExpression());\n    }\n\n    return true;\n  }\n\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== \"void\") {\n      return false;\n    }\n\n    return this.get(\"argument\").isConstantExpression();\n  }\n\n  if (this.isBinaryExpression()) {\n    return this.get(\"left\").isConstantExpression() && this.get(\"right\").isConstantExpression();\n  }\n\n  return false;\n}\n\nfunction isInStrictMode() {\n  const start = this.isProgram() ? this : this.parentPath;\n  const strictParent = start.find(path => {\n    if (path.isProgram({\n      sourceType: \"module\"\n    })) return true;\n    if (path.isClass()) return true;\n    if (!path.isProgram() && !path.isFunction()) return false;\n\n    if (path.isArrowFunctionExpression() && !path.get(\"body\").isBlockStatement()) {\n      return false;\n    }\n\n    const body = path.isFunction() ? path.node.body : path.node;\n\n    for (const directive of body.directives) {\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  });\n  return !!strictParent;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_guessExecutionStatusRelativeTo","_guessExecutionStatusRelativeToDifferentFunctions","_resolve","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","equals","getSource","has","is","isCompletionRecord","isConstantExpression","isInStrictMode","isNodeType","isStatementOrBlock","isStatic","isnt","matchesPattern","referencesImport","resolve","willIMaybeExecuteBefore","_t","require","STATEMENT_OR_BLOCK_KEYS","VISITOR_KEYS","isBlockStatement","isExpression","isIdentifier","isLiteral","isStringLiteral","isType","_matchesPattern","pattern","allowPartial","node","key","val","Array","isArray","length","scope","type","parentPath","isFor","replacement","isArrowFunctionExpression","allowInsideFunction","path","first","container","isFunction","isProgram","isLabeledStatement","includes","moduleSource","importName","isReferencedIdentifier","isJSXMemberExpression","property","name","isMemberExpression","isOptionalMemberExpression","computed","object","get","binding","getBinding","kind","parent","isImportDeclaration","source","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","imported","end","code","hub","getCode","slice","start","target","getOuterFunction","getFunctionParent","getProgramParent","isExecutionUncertain","isExecutionUncertainInList","paths","maxIndex","i","parentKey","funcParent","this","getAncestry","indexOf","commonPath","commonIndex","Error","divergence","listKey","keys","keyPosition","executionOrderCheckedNodes","WeakSet","isFunctionDeclaration","isExportDeclaration","id","references","referencePaths","allStatus","childOfFunction","find","isCallExpression","add","status","delete","dangerous","resolved","push","isVariableDeclarator","constant","ret","isTypeCastExpression","targetKey","toComputedKey","targetName","isObjectExpression","props","prop","isProperty","match","isArrayExpression","isNaN","elems","elem","isRegExpLiteral","isTemplateLiteral","every","expression","isUnaryExpression","operator","isBinaryExpression","strictParent","sourceType","isClass","body","directive","directives"],"sources":["C:/Users/Arber/Documents/GitHub/Food-delivery-app-LabCouse1/Food-delivery-app-LabCouse1/front-end-code/node_modules/@babel/traverse/lib/path/introspection.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;\r\nexports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;\r\nexports._resolve = _resolve;\r\nexports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;\r\nexports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;\r\nexports.equals = equals;\r\nexports.getSource = getSource;\r\nexports.has = has;\r\nexports.is = void 0;\r\nexports.isCompletionRecord = isCompletionRecord;\r\nexports.isConstantExpression = isConstantExpression;\r\nexports.isInStrictMode = isInStrictMode;\r\nexports.isNodeType = isNodeType;\r\nexports.isStatementOrBlock = isStatementOrBlock;\r\nexports.isStatic = isStatic;\r\nexports.isnt = isnt;\r\nexports.matchesPattern = matchesPattern;\r\nexports.referencesImport = referencesImport;\r\nexports.resolve = resolve;\r\nexports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;\r\n\r\nvar _t = require(\"@babel/types\");\r\n\r\nconst {\r\n  STATEMENT_OR_BLOCK_KEYS,\r\n  VISITOR_KEYS,\r\n  isBlockStatement,\r\n  isExpression,\r\n  isIdentifier,\r\n  isLiteral,\r\n  isStringLiteral,\r\n  isType,\r\n  matchesPattern: _matchesPattern\r\n} = _t;\r\n\r\nfunction matchesPattern(pattern, allowPartial) {\r\n  return _matchesPattern(this.node, pattern, allowPartial);\r\n}\r\n\r\nfunction has(key) {\r\n  const val = this.node && this.node[key];\r\n\r\n  if (val && Array.isArray(val)) {\r\n    return !!val.length;\r\n  } else {\r\n    return !!val;\r\n  }\r\n}\r\n\r\nfunction isStatic() {\r\n  return this.scope.isStatic(this.node);\r\n}\r\n\r\nconst is = has;\r\nexports.is = is;\r\n\r\nfunction isnt(key) {\r\n  return !this.has(key);\r\n}\r\n\r\nfunction equals(key, value) {\r\n  return this.node[key] === value;\r\n}\r\n\r\nfunction isNodeType(type) {\r\n  return isType(this.type, type);\r\n}\r\n\r\nfunction canHaveVariableDeclarationOrExpression() {\r\n  return (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor();\r\n}\r\n\r\nfunction canSwapBetweenExpressionAndStatement(replacement) {\r\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\r\n    return false;\r\n  }\r\n\r\n  if (this.isExpression()) {\r\n    return isBlockStatement(replacement);\r\n  } else if (this.isBlockStatement()) {\r\n    return isExpression(replacement);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isCompletionRecord(allowInsideFunction) {\r\n  let path = this;\r\n  let first = true;\r\n\r\n  do {\r\n    const container = path.container;\r\n\r\n    if (path.isFunction() && !first) {\r\n      return !!allowInsideFunction;\r\n    }\r\n\r\n    first = false;\r\n\r\n    if (Array.isArray(container) && path.key !== container.length - 1) {\r\n      return false;\r\n    }\r\n  } while ((path = path.parentPath) && !path.isProgram());\r\n\r\n  return true;\r\n}\r\n\r\nfunction isStatementOrBlock() {\r\n  if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {\r\n    return false;\r\n  } else {\r\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key);\r\n  }\r\n}\r\n\r\nfunction referencesImport(moduleSource, importName) {\r\n  if (!this.isReferencedIdentifier()) {\r\n    if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {\r\n      value: importName\r\n    }) : this.node.property.name === importName)) {\r\n      const object = this.get(\"object\");\r\n      return object.isReferencedIdentifier() && object.referencesImport(moduleSource, \"*\");\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  const binding = this.scope.getBinding(this.node.name);\r\n  if (!binding || binding.kind !== \"module\") return false;\r\n  const path = binding.path;\r\n  const parent = path.parentPath;\r\n  if (!parent.isImportDeclaration()) return false;\r\n\r\n  if (parent.node.source.value === moduleSource) {\r\n    if (!importName) return true;\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\r\n    return true;\r\n  }\r\n\r\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\r\n    return true;\r\n  }\r\n\r\n  if (path.isImportSpecifier() && isIdentifier(path.node.imported, {\r\n    name: importName\r\n  })) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getSource() {\r\n  const node = this.node;\r\n\r\n  if (node.end) {\r\n    const code = this.hub.getCode();\r\n    if (code) return code.slice(node.start, node.end);\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nfunction willIMaybeExecuteBefore(target) {\r\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\r\n}\r\n\r\nfunction getOuterFunction(path) {\r\n  return (path.scope.getFunctionParent() || path.scope.getProgramParent()).path;\r\n}\r\n\r\nfunction isExecutionUncertain(type, key) {\r\n  switch (type) {\r\n    case \"LogicalExpression\":\r\n      return key === \"right\";\r\n\r\n    case \"ConditionalExpression\":\r\n    case \"IfStatement\":\r\n      return key === \"consequent\" || key === \"alternate\";\r\n\r\n    case \"WhileStatement\":\r\n    case \"DoWhileStatement\":\r\n    case \"ForInStatement\":\r\n    case \"ForOfStatement\":\r\n      return key === \"body\";\r\n\r\n    case \"ForStatement\":\r\n      return key === \"body\" || key === \"update\";\r\n\r\n    case \"SwitchStatement\":\r\n      return key === \"cases\";\r\n\r\n    case \"TryStatement\":\r\n      return key === \"handler\";\r\n\r\n    case \"AssignmentPattern\":\r\n      return key === \"right\";\r\n\r\n    case \"OptionalMemberExpression\":\r\n      return key === \"property\";\r\n\r\n    case \"OptionalCallExpression\":\r\n      return key === \"arguments\";\r\n\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction isExecutionUncertainInList(paths, maxIndex) {\r\n  for (let i = 0; i < maxIndex; i++) {\r\n    const path = paths[i];\r\n\r\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction _guessExecutionStatusRelativeTo(target) {\r\n  const funcParent = {\r\n    this: getOuterFunction(this),\r\n    target: getOuterFunction(target)\r\n  };\r\n\r\n  if (funcParent.target.node !== funcParent.this.node) {\r\n    return this._guessExecutionStatusRelativeToDifferentFunctions(funcParent.target);\r\n  }\r\n\r\n  const paths = {\r\n    target: target.getAncestry(),\r\n    this: this.getAncestry()\r\n  };\r\n  if (paths.target.indexOf(this) >= 0) return \"after\";\r\n  if (paths.this.indexOf(target) >= 0) return \"before\";\r\n  let commonPath;\r\n  const commonIndex = {\r\n    target: 0,\r\n    this: 0\r\n  };\r\n\r\n  while (!commonPath && commonIndex.this < paths.this.length) {\r\n    const path = paths.this[commonIndex.this];\r\n    commonIndex.target = paths.target.indexOf(path);\r\n\r\n    if (commonIndex.target >= 0) {\r\n      commonPath = path;\r\n    } else {\r\n      commonIndex.this++;\r\n    }\r\n  }\r\n\r\n  if (!commonPath) {\r\n    throw new Error(\"Internal Babel error - The two compared nodes\" + \" don't appear to belong to the same program.\");\r\n  }\r\n\r\n  if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {\r\n    return \"unknown\";\r\n  }\r\n\r\n  const divergence = {\r\n    this: paths.this[commonIndex.this - 1],\r\n    target: paths.target[commonIndex.target - 1]\r\n  };\r\n\r\n  if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {\r\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\r\n  }\r\n\r\n  const keys = VISITOR_KEYS[commonPath.type];\r\n  const keyPosition = {\r\n    this: keys.indexOf(divergence.this.parentKey),\r\n    target: keys.indexOf(divergence.target.parentKey)\r\n  };\r\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\r\n}\r\n\r\nconst executionOrderCheckedNodes = new WeakSet();\r\n\r\nfunction _guessExecutionStatusRelativeToDifferentFunctions(target) {\r\n  if (!target.isFunctionDeclaration() || target.parentPath.isExportDeclaration()) {\r\n    return \"unknown\";\r\n  }\r\n\r\n  const binding = target.scope.getBinding(target.node.id.name);\r\n  if (!binding.references) return \"before\";\r\n  const referencePaths = binding.referencePaths;\r\n  let allStatus;\r\n\r\n  for (const path of referencePaths) {\r\n    const childOfFunction = !!path.find(path => path.node === target.node);\r\n    if (childOfFunction) continue;\r\n\r\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\r\n      return \"unknown\";\r\n    }\r\n\r\n    if (executionOrderCheckedNodes.has(path.node)) continue;\r\n    executionOrderCheckedNodes.add(path.node);\r\n\r\n    const status = this._guessExecutionStatusRelativeTo(path);\r\n\r\n    executionOrderCheckedNodes.delete(path.node);\r\n\r\n    if (allStatus && allStatus !== status) {\r\n      return \"unknown\";\r\n    } else {\r\n      allStatus = status;\r\n    }\r\n  }\r\n\r\n  return allStatus;\r\n}\r\n\r\nfunction resolve(dangerous, resolved) {\r\n  return this._resolve(dangerous, resolved) || this;\r\n}\r\n\r\nfunction _resolve(dangerous, resolved) {\r\n  if (resolved && resolved.indexOf(this) >= 0) return;\r\n  resolved = resolved || [];\r\n  resolved.push(this);\r\n\r\n  if (this.isVariableDeclarator()) {\r\n    if (this.get(\"id\").isIdentifier()) {\r\n      return this.get(\"init\").resolve(dangerous, resolved);\r\n    } else {}\r\n  } else if (this.isReferencedIdentifier()) {\r\n    const binding = this.scope.getBinding(this.node.name);\r\n    if (!binding) return;\r\n    if (!binding.constant) return;\r\n    if (binding.kind === \"module\") return;\r\n\r\n    if (binding.path !== this) {\r\n      const ret = binding.path.resolve(dangerous, resolved);\r\n      if (this.find(parent => parent.node === ret.node)) return;\r\n      return ret;\r\n    }\r\n  } else if (this.isTypeCastExpression()) {\r\n    return this.get(\"expression\").resolve(dangerous, resolved);\r\n  } else if (dangerous && this.isMemberExpression()) {\r\n    const targetKey = this.toComputedKey();\r\n    if (!isLiteral(targetKey)) return;\r\n    const targetName = targetKey.value;\r\n    const target = this.get(\"object\").resolve(dangerous, resolved);\r\n\r\n    if (target.isObjectExpression()) {\r\n      const props = target.get(\"properties\");\r\n\r\n      for (const prop of props) {\r\n        if (!prop.isProperty()) continue;\r\n        const key = prop.get(\"key\");\r\n        let match = prop.isnt(\"computed\") && key.isIdentifier({\r\n          name: targetName\r\n        });\r\n        match = match || key.isLiteral({\r\n          value: targetName\r\n        });\r\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\r\n      }\r\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\r\n      const elems = target.get(\"elements\");\r\n      const elem = elems[targetName];\r\n      if (elem) return elem.resolve(dangerous, resolved);\r\n    }\r\n  }\r\n}\r\n\r\nfunction isConstantExpression() {\r\n  if (this.isIdentifier()) {\r\n    const binding = this.scope.getBinding(this.node.name);\r\n    if (!binding) return false;\r\n    return binding.constant;\r\n  }\r\n\r\n  if (this.isLiteral()) {\r\n    if (this.isRegExpLiteral()) {\r\n      return false;\r\n    }\r\n\r\n    if (this.isTemplateLiteral()) {\r\n      return this.get(\"expressions\").every(expression => expression.isConstantExpression());\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  if (this.isUnaryExpression()) {\r\n    if (this.node.operator !== \"void\") {\r\n      return false;\r\n    }\r\n\r\n    return this.get(\"argument\").isConstantExpression();\r\n  }\r\n\r\n  if (this.isBinaryExpression()) {\r\n    return this.get(\"left\").isConstantExpression() && this.get(\"right\").isConstantExpression();\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isInStrictMode() {\r\n  const start = this.isProgram() ? this : this.parentPath;\r\n  const strictParent = start.find(path => {\r\n    if (path.isProgram({\r\n      sourceType: \"module\"\r\n    })) return true;\r\n    if (path.isClass()) return true;\r\n    if (!path.isProgram() && !path.isFunction()) return false;\r\n\r\n    if (path.isArrowFunctionExpression() && !path.get(\"body\").isBlockStatement()) {\r\n      return false;\r\n    }\r\n\r\n    const body = path.isFunction() ? path.node.body : path.node;\r\n\r\n    for (const directive of body.directives) {\r\n      if (directive.value.value === \"use strict\") {\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n  return !!strictParent;\r\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,+BAAR,GAA0CA,+BAA1C;AACAF,OAAO,CAACG,iDAAR,GAA4DA,iDAA5D;AACAH,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACAJ,OAAO,CAACK,sCAAR,GAAiDA,sCAAjD;AACAL,OAAO,CAACM,oCAAR,GAA+CA,oCAA/C;AACAN,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACAP,OAAO,CAACQ,SAAR,GAAoBA,SAApB;AACAR,OAAO,CAACS,GAAR,GAAcA,GAAd;AACAT,OAAO,CAACU,EAAR,GAAa,KAAK,CAAlB;AACAV,OAAO,CAACW,kBAAR,GAA6BA,kBAA7B;AACAX,OAAO,CAACY,oBAAR,GAA+BA,oBAA/B;AACAZ,OAAO,CAACa,cAAR,GAAyBA,cAAzB;AACAb,OAAO,CAACc,UAAR,GAAqBA,UAArB;AACAd,OAAO,CAACe,kBAAR,GAA6BA,kBAA7B;AACAf,OAAO,CAACgB,QAAR,GAAmBA,QAAnB;AACAhB,OAAO,CAACiB,IAAR,GAAeA,IAAf;AACAjB,OAAO,CAACkB,cAAR,GAAyBA,cAAzB;AACAlB,OAAO,CAACmB,gBAAR,GAA2BA,gBAA3B;AACAnB,OAAO,CAACoB,OAAR,GAAkBA,OAAlB;AACApB,OAAO,CAACqB,uBAAR,GAAkCA,uBAAlC;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,cAAD,CAAhB;;AAEA,MAAM;EACJC,uBADI;EAEJC,YAFI;EAGJC,gBAHI;EAIJC,YAJI;EAKJC,YALI;EAMJC,SANI;EAOJC,eAPI;EAQJC,MARI;EASJb,cAAc,EAAEc;AATZ,IAUFV,EAVJ;;AAYA,SAASJ,cAAT,CAAwBe,OAAxB,EAAiCC,YAAjC,EAA+C;EAC7C,OAAOF,eAAe,CAAC,KAAKG,IAAN,EAAYF,OAAZ,EAAqBC,YAArB,CAAtB;AACD;;AAED,SAASzB,GAAT,CAAa2B,GAAb,EAAkB;EAChB,MAAMC,GAAG,GAAG,KAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUC,GAAV,CAAzB;;EAEA,IAAIC,GAAG,IAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAX,EAA+B;IAC7B,OAAO,CAAC,CAACA,GAAG,CAACG,MAAb;EACD,CAFD,MAEO;IACL,OAAO,CAAC,CAACH,GAAT;EACD;AACF;;AAED,SAASrB,QAAT,GAAoB;EAClB,OAAO,KAAKyB,KAAL,CAAWzB,QAAX,CAAoB,KAAKmB,IAAzB,CAAP;AACD;;AAED,MAAMzB,EAAE,GAAGD,GAAX;AACAT,OAAO,CAACU,EAAR,GAAaA,EAAb;;AAEA,SAASO,IAAT,CAAcmB,GAAd,EAAmB;EACjB,OAAO,CAAC,KAAK3B,GAAL,CAAS2B,GAAT,CAAR;AACD;;AAED,SAAS7B,MAAT,CAAgB6B,GAAhB,EAAqBnC,KAArB,EAA4B;EAC1B,OAAO,KAAKkC,IAAL,CAAUC,GAAV,MAAmBnC,KAA1B;AACD;;AAED,SAASa,UAAT,CAAoB4B,IAApB,EAA0B;EACxB,OAAOX,MAAM,CAAC,KAAKW,IAAN,EAAYA,IAAZ,CAAb;AACD;;AAED,SAASrC,sCAAT,GAAkD;EAChD,OAAO,CAAC,KAAK+B,GAAL,KAAa,MAAb,IAAuB,KAAKA,GAAL,KAAa,MAArC,KAAgD,KAAKO,UAAL,CAAgBC,KAAhB,EAAvD;AACD;;AAED,SAAStC,oCAAT,CAA8CuC,WAA9C,EAA2D;EACzD,IAAI,KAAKT,GAAL,KAAa,MAAb,IAAuB,CAAC,KAAKO,UAAL,CAAgBG,yBAAhB,EAA5B,EAAyE;IACvE,OAAO,KAAP;EACD;;EAED,IAAI,KAAKnB,YAAL,EAAJ,EAAyB;IACvB,OAAOD,gBAAgB,CAACmB,WAAD,CAAvB;EACD,CAFD,MAEO,IAAI,KAAKnB,gBAAL,EAAJ,EAA6B;IAClC,OAAOC,YAAY,CAACkB,WAAD,CAAnB;EACD;;EAED,OAAO,KAAP;AACD;;AAED,SAASlC,kBAAT,CAA4BoC,mBAA5B,EAAiD;EAC/C,IAAIC,IAAI,GAAG,IAAX;EACA,IAAIC,KAAK,GAAG,IAAZ;;EAEA,GAAG;IACD,MAAMC,SAAS,GAAGF,IAAI,CAACE,SAAvB;;IAEA,IAAIF,IAAI,CAACG,UAAL,MAAqB,CAACF,KAA1B,EAAiC;MAC/B,OAAO,CAAC,CAACF,mBAAT;IACD;;IAEDE,KAAK,GAAG,KAAR;;IAEA,IAAIX,KAAK,CAACC,OAAN,CAAcW,SAAd,KAA4BF,IAAI,CAACZ,GAAL,KAAac,SAAS,CAACV,MAAV,GAAmB,CAAhE,EAAmE;MACjE,OAAO,KAAP;IACD;EACF,CAZD,QAYS,CAACQ,IAAI,GAAGA,IAAI,CAACL,UAAb,KAA4B,CAACK,IAAI,CAACI,SAAL,EAZtC;;EAcA,OAAO,IAAP;AACD;;AAED,SAASrC,kBAAT,GAA8B;EAC5B,IAAI,KAAK4B,UAAL,CAAgBU,kBAAhB,MAAwC3B,gBAAgB,CAAC,KAAKwB,SAAN,CAA5D,EAA8E;IAC5E,OAAO,KAAP;EACD,CAFD,MAEO;IACL,OAAO1B,uBAAuB,CAAC8B,QAAxB,CAAiC,KAAKlB,GAAtC,CAAP;EACD;AACF;;AAED,SAASjB,gBAAT,CAA0BoC,YAA1B,EAAwCC,UAAxC,EAAoD;EAClD,IAAI,CAAC,KAAKC,sBAAL,EAAL,EAAoC;IAClC,IAAI,KAAKC,qBAAL,MAAgC,KAAKvB,IAAL,CAAUwB,QAAV,CAAmBC,IAAnB,KAA4BJ,UAA5D,IAA0E,CAAC,KAAKK,kBAAL,MAA6B,KAAKC,0BAAL,EAA9B,MAAqE,KAAK3B,IAAL,CAAU4B,QAAV,GAAqBjC,eAAe,CAAC,KAAKK,IAAL,CAAUwB,QAAX,EAAqB;MAC1M1D,KAAK,EAAEuD;IADmM,CAArB,CAApC,GAE9I,KAAKrB,IAAL,CAAUwB,QAAV,CAAmBC,IAAnB,KAA4BJ,UAF6C,CAA9E,EAE8C;MAC5C,MAAMQ,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAf;MACA,OAAOD,MAAM,CAACP,sBAAP,MAAmCO,MAAM,CAAC7C,gBAAP,CAAwBoC,YAAxB,EAAsC,GAAtC,CAA1C;IACD;;IAED,OAAO,KAAP;EACD;;EAED,MAAMW,OAAO,GAAG,KAAKzB,KAAL,CAAW0B,UAAX,CAAsB,KAAKhC,IAAL,CAAUyB,IAAhC,CAAhB;EACA,IAAI,CAACM,OAAD,IAAYA,OAAO,CAACE,IAAR,KAAiB,QAAjC,EAA2C,OAAO,KAAP;EAC3C,MAAMpB,IAAI,GAAGkB,OAAO,CAAClB,IAArB;EACA,MAAMqB,MAAM,GAAGrB,IAAI,CAACL,UAApB;EACA,IAAI,CAAC0B,MAAM,CAACC,mBAAP,EAAL,EAAmC,OAAO,KAAP;;EAEnC,IAAID,MAAM,CAAClC,IAAP,CAAYoC,MAAZ,CAAmBtE,KAAnB,KAA6BsD,YAAjC,EAA+C;IAC7C,IAAI,CAACC,UAAL,EAAiB,OAAO,IAAP;EAClB,CAFD,MAEO;IACL,OAAO,KAAP;EACD;;EAED,IAAIR,IAAI,CAACwB,wBAAL,MAAmChB,UAAU,KAAK,SAAtD,EAAiE;IAC/D,OAAO,IAAP;EACD;;EAED,IAAIR,IAAI,CAACyB,0BAAL,MAAqCjB,UAAU,KAAK,GAAxD,EAA6D;IAC3D,OAAO,IAAP;EACD;;EAED,IAAIR,IAAI,CAAC0B,iBAAL,MAA4B9C,YAAY,CAACoB,IAAI,CAACb,IAAL,CAAUwC,QAAX,EAAqB;IAC/Df,IAAI,EAAEJ;EADyD,CAArB,CAA5C,EAEI;IACF,OAAO,IAAP;EACD;;EAED,OAAO,KAAP;AACD;;AAED,SAAShD,SAAT,GAAqB;EACnB,MAAM2B,IAAI,GAAG,KAAKA,IAAlB;;EAEA,IAAIA,IAAI,CAACyC,GAAT,EAAc;IACZ,MAAMC,IAAI,GAAG,KAAKC,GAAL,CAASC,OAAT,EAAb;IACA,IAAIF,IAAJ,EAAU,OAAOA,IAAI,CAACG,KAAL,CAAW7C,IAAI,CAAC8C,KAAhB,EAAuB9C,IAAI,CAACyC,GAA5B,CAAP;EACX;;EAED,OAAO,EAAP;AACD;;AAED,SAASvD,uBAAT,CAAiC6D,MAAjC,EAAyC;EACvC,OAAO,KAAKhF,+BAAL,CAAqCgF,MAArC,MAAiD,OAAxD;AACD;;AAED,SAASC,gBAAT,CAA0BnC,IAA1B,EAAgC;EAC9B,OAAO,CAACA,IAAI,CAACP,KAAL,CAAW2C,iBAAX,MAAkCpC,IAAI,CAACP,KAAL,CAAW4C,gBAAX,EAAnC,EAAkErC,IAAzE;AACD;;AAED,SAASsC,oBAAT,CAA8B5C,IAA9B,EAAoCN,GAApC,EAAyC;EACvC,QAAQM,IAAR;IACE,KAAK,mBAAL;MACE,OAAON,GAAG,KAAK,OAAf;;IAEF,KAAK,uBAAL;IACA,KAAK,aAAL;MACE,OAAOA,GAAG,KAAK,YAAR,IAAwBA,GAAG,KAAK,WAAvC;;IAEF,KAAK,gBAAL;IACA,KAAK,kBAAL;IACA,KAAK,gBAAL;IACA,KAAK,gBAAL;MACE,OAAOA,GAAG,KAAK,MAAf;;IAEF,KAAK,cAAL;MACE,OAAOA,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,QAAjC;;IAEF,KAAK,iBAAL;MACE,OAAOA,GAAG,KAAK,OAAf;;IAEF,KAAK,cAAL;MACE,OAAOA,GAAG,KAAK,SAAf;;IAEF,KAAK,mBAAL;MACE,OAAOA,GAAG,KAAK,OAAf;;IAEF,KAAK,0BAAL;MACE,OAAOA,GAAG,KAAK,UAAf;;IAEF,KAAK,wBAAL;MACE,OAAOA,GAAG,KAAK,WAAf;;IAEF;MACE,OAAO,KAAP;EAjCJ;AAmCD;;AAED,SAASmD,0BAAT,CAAoCC,KAApC,EAA2CC,QAA3C,EAAqD;EACnD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;IACjC,MAAM1C,IAAI,GAAGwC,KAAK,CAACE,CAAD,CAAlB;;IAEA,IAAIJ,oBAAoB,CAACtC,IAAI,CAACqB,MAAL,CAAY3B,IAAb,EAAmBM,IAAI,CAAC2C,SAAxB,CAAxB,EAA4D;MAC1D,OAAO,IAAP;IACD;EACF;;EAED,OAAO,KAAP;AACD;;AAED,SAASzF,+BAAT,CAAyCgF,MAAzC,EAAiD;EAC/C,MAAMU,UAAU,GAAG;IACjBC,IAAI,EAAEV,gBAAgB,CAAC,IAAD,CADL;IAEjBD,MAAM,EAAEC,gBAAgB,CAACD,MAAD;EAFP,CAAnB;;EAKA,IAAIU,UAAU,CAACV,MAAX,CAAkB/C,IAAlB,KAA2ByD,UAAU,CAACC,IAAX,CAAgB1D,IAA/C,EAAqD;IACnD,OAAO,KAAKhC,iDAAL,CAAuDyF,UAAU,CAACV,MAAlE,CAAP;EACD;;EAED,MAAMM,KAAK,GAAG;IACZN,MAAM,EAAEA,MAAM,CAACY,WAAP,EADI;IAEZD,IAAI,EAAE,KAAKC,WAAL;EAFM,CAAd;EAIA,IAAIN,KAAK,CAACN,MAAN,CAAaa,OAAb,CAAqB,IAArB,KAA8B,CAAlC,EAAqC,OAAO,OAAP;EACrC,IAAIP,KAAK,CAACK,IAAN,CAAWE,OAAX,CAAmBb,MAAnB,KAA8B,CAAlC,EAAqC,OAAO,QAAP;EACrC,IAAIc,UAAJ;EACA,MAAMC,WAAW,GAAG;IAClBf,MAAM,EAAE,CADU;IAElBW,IAAI,EAAE;EAFY,CAApB;;EAKA,OAAO,CAACG,UAAD,IAAeC,WAAW,CAACJ,IAAZ,GAAmBL,KAAK,CAACK,IAAN,CAAWrD,MAApD,EAA4D;IAC1D,MAAMQ,IAAI,GAAGwC,KAAK,CAACK,IAAN,CAAWI,WAAW,CAACJ,IAAvB,CAAb;IACAI,WAAW,CAACf,MAAZ,GAAqBM,KAAK,CAACN,MAAN,CAAaa,OAAb,CAAqB/C,IAArB,CAArB;;IAEA,IAAIiD,WAAW,CAACf,MAAZ,IAAsB,CAA1B,EAA6B;MAC3Bc,UAAU,GAAGhD,IAAb;IACD,CAFD,MAEO;MACLiD,WAAW,CAACJ,IAAZ;IACD;EACF;;EAED,IAAI,CAACG,UAAL,EAAiB;IACf,MAAM,IAAIE,KAAJ,CAAU,kDAAkD,8CAA5D,CAAN;EACD;;EAED,IAAIX,0BAA0B,CAACC,KAAK,CAACK,IAAP,EAAaI,WAAW,CAACJ,IAAZ,GAAmB,CAAhC,CAA1B,IAAgEN,0BAA0B,CAACC,KAAK,CAACN,MAAP,EAAee,WAAW,CAACf,MAAZ,GAAqB,CAApC,CAA9F,EAAsI;IACpI,OAAO,SAAP;EACD;;EAED,MAAMiB,UAAU,GAAG;IACjBN,IAAI,EAAEL,KAAK,CAACK,IAAN,CAAWI,WAAW,CAACJ,IAAZ,GAAmB,CAA9B,CADW;IAEjBX,MAAM,EAAEM,KAAK,CAACN,MAAN,CAAae,WAAW,CAACf,MAAZ,GAAqB,CAAlC;EAFS,CAAnB;;EAKA,IAAIiB,UAAU,CAACjB,MAAX,CAAkBkB,OAAlB,IAA6BD,UAAU,CAACN,IAAX,CAAgBO,OAA7C,IAAwDD,UAAU,CAACjB,MAAX,CAAkBhC,SAAlB,KAAgCiD,UAAU,CAACN,IAAX,CAAgB3C,SAA5G,EAAuH;IACrH,OAAOiD,UAAU,CAACjB,MAAX,CAAkB9C,GAAlB,GAAwB+D,UAAU,CAACN,IAAX,CAAgBzD,GAAxC,GAA8C,QAA9C,GAAyD,OAAhE;EACD;;EAED,MAAMiE,IAAI,GAAG5E,YAAY,CAACuE,UAAU,CAACtD,IAAZ,CAAzB;EACA,MAAM4D,WAAW,GAAG;IAClBT,IAAI,EAAEQ,IAAI,CAACN,OAAL,CAAaI,UAAU,CAACN,IAAX,CAAgBF,SAA7B,CADY;IAElBT,MAAM,EAAEmB,IAAI,CAACN,OAAL,CAAaI,UAAU,CAACjB,MAAX,CAAkBS,SAA/B;EAFU,CAApB;EAIA,OAAOW,WAAW,CAACpB,MAAZ,GAAqBoB,WAAW,CAACT,IAAjC,GAAwC,QAAxC,GAAmD,OAA1D;AACD;;AAED,MAAMU,0BAA0B,GAAG,IAAIC,OAAJ,EAAnC;;AAEA,SAASrG,iDAAT,CAA2D+E,MAA3D,EAAmE;EACjE,IAAI,CAACA,MAAM,CAACuB,qBAAP,EAAD,IAAmCvB,MAAM,CAACvC,UAAP,CAAkB+D,mBAAlB,EAAvC,EAAgF;IAC9E,OAAO,SAAP;EACD;;EAED,MAAMxC,OAAO,GAAGgB,MAAM,CAACzC,KAAP,CAAa0B,UAAb,CAAwBe,MAAM,CAAC/C,IAAP,CAAYwE,EAAZ,CAAe/C,IAAvC,CAAhB;EACA,IAAI,CAACM,OAAO,CAAC0C,UAAb,EAAyB,OAAO,QAAP;EACzB,MAAMC,cAAc,GAAG3C,OAAO,CAAC2C,cAA/B;EACA,IAAIC,SAAJ;;EAEA,KAAK,MAAM9D,IAAX,IAAmB6D,cAAnB,EAAmC;IACjC,MAAME,eAAe,GAAG,CAAC,CAAC/D,IAAI,CAACgE,IAAL,CAAUhE,IAAI,IAAIA,IAAI,CAACb,IAAL,KAAc+C,MAAM,CAAC/C,IAAvC,CAA1B;IACA,IAAI4E,eAAJ,EAAqB;;IAErB,IAAI/D,IAAI,CAACZ,GAAL,KAAa,QAAb,IAAyB,CAACY,IAAI,CAACL,UAAL,CAAgBsE,gBAAhB,EAA9B,EAAkE;MAChE,OAAO,SAAP;IACD;;IAED,IAAIV,0BAA0B,CAAC9F,GAA3B,CAA+BuC,IAAI,CAACb,IAApC,CAAJ,EAA+C;IAC/CoE,0BAA0B,CAACW,GAA3B,CAA+BlE,IAAI,CAACb,IAApC;;IAEA,MAAMgF,MAAM,GAAG,KAAKjH,+BAAL,CAAqC8C,IAArC,CAAf;;IAEAuD,0BAA0B,CAACa,MAA3B,CAAkCpE,IAAI,CAACb,IAAvC;;IAEA,IAAI2E,SAAS,IAAIA,SAAS,KAAKK,MAA/B,EAAuC;MACrC,OAAO,SAAP;IACD,CAFD,MAEO;MACLL,SAAS,GAAGK,MAAZ;IACD;EACF;;EAED,OAAOL,SAAP;AACD;;AAED,SAAS1F,OAAT,CAAiBiG,SAAjB,EAA4BC,QAA5B,EAAsC;EACpC,OAAO,KAAKlH,QAAL,CAAciH,SAAd,EAAyBC,QAAzB,KAAsC,IAA7C;AACD;;AAED,SAASlH,QAAT,CAAkBiH,SAAlB,EAA6BC,QAA7B,EAAuC;EACrC,IAAIA,QAAQ,IAAIA,QAAQ,CAACvB,OAAT,CAAiB,IAAjB,KAA0B,CAA1C,EAA6C;EAC7CuB,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;EACAA,QAAQ,CAACC,IAAT,CAAc,IAAd;;EAEA,IAAI,KAAKC,oBAAL,EAAJ,EAAiC;IAC/B,IAAI,KAAKvD,GAAL,CAAS,IAAT,EAAerC,YAAf,EAAJ,EAAmC;MACjC,OAAO,KAAKqC,GAAL,CAAS,MAAT,EAAiB7C,OAAjB,CAAyBiG,SAAzB,EAAoCC,QAApC,CAAP;IACD,CAFD,MAEO,CAAE;EACV,CAJD,MAIO,IAAI,KAAK7D,sBAAL,EAAJ,EAAmC;IACxC,MAAMS,OAAO,GAAG,KAAKzB,KAAL,CAAW0B,UAAX,CAAsB,KAAKhC,IAAL,CAAUyB,IAAhC,CAAhB;IACA,IAAI,CAACM,OAAL,EAAc;IACd,IAAI,CAACA,OAAO,CAACuD,QAAb,EAAuB;IACvB,IAAIvD,OAAO,CAACE,IAAR,KAAiB,QAArB,EAA+B;;IAE/B,IAAIF,OAAO,CAAClB,IAAR,KAAiB,IAArB,EAA2B;MACzB,MAAM0E,GAAG,GAAGxD,OAAO,CAAClB,IAAR,CAAa5B,OAAb,CAAqBiG,SAArB,EAAgCC,QAAhC,CAAZ;MACA,IAAI,KAAKN,IAAL,CAAU3C,MAAM,IAAIA,MAAM,CAAClC,IAAP,KAAgBuF,GAAG,CAACvF,IAAxC,CAAJ,EAAmD;MACnD,OAAOuF,GAAP;IACD;EACF,CAXM,MAWA,IAAI,KAAKC,oBAAL,EAAJ,EAAiC;IACtC,OAAO,KAAK1D,GAAL,CAAS,YAAT,EAAuB7C,OAAvB,CAA+BiG,SAA/B,EAA0CC,QAA1C,CAAP;EACD,CAFM,MAEA,IAAID,SAAS,IAAI,KAAKxD,kBAAL,EAAjB,EAA4C;IACjD,MAAM+D,SAAS,GAAG,KAAKC,aAAL,EAAlB;IACA,IAAI,CAAChG,SAAS,CAAC+F,SAAD,CAAd,EAA2B;IAC3B,MAAME,UAAU,GAAGF,SAAS,CAAC3H,KAA7B;IACA,MAAMiF,MAAM,GAAG,KAAKjB,GAAL,CAAS,QAAT,EAAmB7C,OAAnB,CAA2BiG,SAA3B,EAAsCC,QAAtC,CAAf;;IAEA,IAAIpC,MAAM,CAAC6C,kBAAP,EAAJ,EAAiC;MAC/B,MAAMC,KAAK,GAAG9C,MAAM,CAACjB,GAAP,CAAW,YAAX,CAAd;;MAEA,KAAK,MAAMgE,IAAX,IAAmBD,KAAnB,EAA0B;QACxB,IAAI,CAACC,IAAI,CAACC,UAAL,EAAL,EAAwB;QACxB,MAAM9F,GAAG,GAAG6F,IAAI,CAAChE,GAAL,CAAS,KAAT,CAAZ;QACA,IAAIkE,KAAK,GAAGF,IAAI,CAAChH,IAAL,CAAU,UAAV,KAAyBmB,GAAG,CAACR,YAAJ,CAAiB;UACpDgC,IAAI,EAAEkE;QAD8C,CAAjB,CAArC;QAGAK,KAAK,GAAGA,KAAK,IAAI/F,GAAG,CAACP,SAAJ,CAAc;UAC7B5B,KAAK,EAAE6H;QADsB,CAAd,CAAjB;QAGA,IAAIK,KAAJ,EAAW,OAAOF,IAAI,CAAChE,GAAL,CAAS,OAAT,EAAkB7C,OAAlB,CAA0BiG,SAA1B,EAAqCC,QAArC,CAAP;MACZ;IACF,CAdD,MAcO,IAAIpC,MAAM,CAACkD,iBAAP,MAA8B,CAACC,KAAK,CAAC,CAACP,UAAF,CAAxC,EAAuD;MAC5D,MAAMQ,KAAK,GAAGpD,MAAM,CAACjB,GAAP,CAAW,UAAX,CAAd;MACA,MAAMsE,IAAI,GAAGD,KAAK,CAACR,UAAD,CAAlB;MACA,IAAIS,IAAJ,EAAU,OAAOA,IAAI,CAACnH,OAAL,CAAaiG,SAAb,EAAwBC,QAAxB,CAAP;IACX;EACF;AACF;;AAED,SAAS1G,oBAAT,GAAgC;EAC9B,IAAI,KAAKgB,YAAL,EAAJ,EAAyB;IACvB,MAAMsC,OAAO,GAAG,KAAKzB,KAAL,CAAW0B,UAAX,CAAsB,KAAKhC,IAAL,CAAUyB,IAAhC,CAAhB;IACA,IAAI,CAACM,OAAL,EAAc,OAAO,KAAP;IACd,OAAOA,OAAO,CAACuD,QAAf;EACD;;EAED,IAAI,KAAK5F,SAAL,EAAJ,EAAsB;IACpB,IAAI,KAAK2G,eAAL,EAAJ,EAA4B;MAC1B,OAAO,KAAP;IACD;;IAED,IAAI,KAAKC,iBAAL,EAAJ,EAA8B;MAC5B,OAAO,KAAKxE,GAAL,CAAS,aAAT,EAAwByE,KAAxB,CAA8BC,UAAU,IAAIA,UAAU,CAAC/H,oBAAX,EAA5C,CAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAED,IAAI,KAAKgI,iBAAL,EAAJ,EAA8B;IAC5B,IAAI,KAAKzG,IAAL,CAAU0G,QAAV,KAAuB,MAA3B,EAAmC;MACjC,OAAO,KAAP;IACD;;IAED,OAAO,KAAK5E,GAAL,CAAS,UAAT,EAAqBrD,oBAArB,EAAP;EACD;;EAED,IAAI,KAAKkI,kBAAL,EAAJ,EAA+B;IAC7B,OAAO,KAAK7E,GAAL,CAAS,MAAT,EAAiBrD,oBAAjB,MAA2C,KAAKqD,GAAL,CAAS,OAAT,EAAkBrD,oBAAlB,EAAlD;EACD;;EAED,OAAO,KAAP;AACD;;AAED,SAASC,cAAT,GAA0B;EACxB,MAAMoE,KAAK,GAAG,KAAK7B,SAAL,KAAmB,IAAnB,GAA0B,KAAKT,UAA7C;EACA,MAAMoG,YAAY,GAAG9D,KAAK,CAAC+B,IAAN,CAAWhE,IAAI,IAAI;IACtC,IAAIA,IAAI,CAACI,SAAL,CAAe;MACjB4F,UAAU,EAAE;IADK,CAAf,CAAJ,EAEI,OAAO,IAAP;IACJ,IAAIhG,IAAI,CAACiG,OAAL,EAAJ,EAAoB,OAAO,IAAP;IACpB,IAAI,CAACjG,IAAI,CAACI,SAAL,EAAD,IAAqB,CAACJ,IAAI,CAACG,UAAL,EAA1B,EAA6C,OAAO,KAAP;;IAE7C,IAAIH,IAAI,CAACF,yBAAL,MAAoC,CAACE,IAAI,CAACiB,GAAL,CAAS,MAAT,EAAiBvC,gBAAjB,EAAzC,EAA8E;MAC5E,OAAO,KAAP;IACD;;IAED,MAAMwH,IAAI,GAAGlG,IAAI,CAACG,UAAL,KAAoBH,IAAI,CAACb,IAAL,CAAU+G,IAA9B,GAAqClG,IAAI,CAACb,IAAvD;;IAEA,KAAK,MAAMgH,SAAX,IAAwBD,IAAI,CAACE,UAA7B,EAAyC;MACvC,IAAID,SAAS,CAAClJ,KAAV,CAAgBA,KAAhB,KAA0B,YAA9B,EAA4C;QAC1C,OAAO,IAAP;MACD;IACF;EACF,CAlBoB,CAArB;EAmBA,OAAO,CAAC,CAAC8I,YAAT;AACD"},"metadata":{},"sourceType":"script"}